// Code generated by go-swagger; DO NOT EDIT.

package artifact_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2beta1ArtifactTask v2beta1 artifact task
//
// swagger:model v2beta1ArtifactTask
type V2beta1ArtifactTask struct {

	// artifact id
	ArtifactID string `json:"artifact_id,omitempty"`

	// The parameter name for the input/output artifact
	// This maybe the same as the Artifact name if the
	// artifact name is not specified. It is used to
	// resolve artifact pipeline channels.
	ArtifactKey string `json:"artifact_key,omitempty"`

	// Output only. The unique server generated id of the ArtifactTask.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The key is often the parameter name used
	// as input/output on the component, but
	// can also take on the value of of other values.
	// For example:
	//  * "param-#" when using parameters in a ParallelFor
	//  * "Output" when using Pythonic Artifacts
	//
	// For outputs, the key is the name of the parameter
	// in the component spec (found in OutputDefinitions)
	// used to output the artifact.
	ProducerKey string `json:"producer_key,omitempty"`

	// The task that produced this artifact
	// For example in the case of a pipeline channel
	// that is an output artifact you might have as
	// input something like the following in the IR:
	//   taskOutputArtifact:
	//     outputArtifactKey: output_dataset
	//     producerTask: create-dataset
	// These fields are used to track this lineage.
	//
	// For outputs, the producer task is the component name
	// of the task that produced the artifact.
	ProducerTaskName string `json:"producer_task_name,omitempty"`

	// run id
	RunID string `json:"run_id,omitempty"`

	// task id
	TaskID string `json:"task_id,omitempty"`

	// type
	Type *V2beta1IOType `json:"type,omitempty"`
}

// Validate validates this v2beta1 artifact task
func (m *V2beta1ArtifactTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2beta1ArtifactTask) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2beta1 artifact task based on the context it is used
func (m *V2beta1ArtifactTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2beta1ArtifactTask) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *V2beta1ArtifactTask) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2beta1ArtifactTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2beta1ArtifactTask) UnmarshalBinary(b []byte) error {
	var res V2beta1ArtifactTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
