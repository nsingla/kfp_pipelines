// Code generated by go-swagger; DO NOT EDIT.

package artifact_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ArtifactArtifactType  - TYPE_UNSPECIFIED: default; treated as "not set"
// reject if unset.
//
// swagger:model ArtifactArtifactType
type ArtifactArtifactType string

func NewArtifactArtifactType(value ArtifactArtifactType) *ArtifactArtifactType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ArtifactArtifactType.
func (m ArtifactArtifactType) Pointer() *ArtifactArtifactType {
	return &m
}

const (

	// ArtifactArtifactTypeTYPEUNSPECIFIED captures enum value "TYPE_UNSPECIFIED"
	ArtifactArtifactTypeTYPEUNSPECIFIED ArtifactArtifactType = "TYPE_UNSPECIFIED"

	// ArtifactArtifactTypeArtifact captures enum value "Artifact"
	ArtifactArtifactTypeArtifact ArtifactArtifactType = "Artifact"

	// ArtifactArtifactTypeModel captures enum value "Model"
	ArtifactArtifactTypeModel ArtifactArtifactType = "Model"

	// ArtifactArtifactTypeDataset captures enum value "Dataset"
	ArtifactArtifactTypeDataset ArtifactArtifactType = "Dataset"

	// ArtifactArtifactTypeHTML captures enum value "HTML"
	ArtifactArtifactTypeHTML ArtifactArtifactType = "HTML"

	// ArtifactArtifactTypeMarkdown captures enum value "Markdown"
	ArtifactArtifactTypeMarkdown ArtifactArtifactType = "Markdown"

	// ArtifactArtifactTypeMetric captures enum value "Metric"
	ArtifactArtifactTypeMetric ArtifactArtifactType = "Metric"

	// ArtifactArtifactTypeClassificationMetric captures enum value "ClassificationMetric"
	ArtifactArtifactTypeClassificationMetric ArtifactArtifactType = "ClassificationMetric"

	// ArtifactArtifactTypeSlicedClassificationMetric captures enum value "SlicedClassificationMetric"
	ArtifactArtifactTypeSlicedClassificationMetric ArtifactArtifactType = "SlicedClassificationMetric"
)

// for schema
var artifactArtifactTypeEnum []interface{}

func init() {
	var res []ArtifactArtifactType
	if err := json.Unmarshal([]byte(`["TYPE_UNSPECIFIED","Artifact","Model","Dataset","HTML","Markdown","Metric","ClassificationMetric","SlicedClassificationMetric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		artifactArtifactTypeEnum = append(artifactArtifactTypeEnum, v)
	}
}

func (m ArtifactArtifactType) validateArtifactArtifactTypeEnum(path, location string, value ArtifactArtifactType) error {
	if err := validate.EnumCase(path, location, value, artifactArtifactTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this artifact artifact type
func (m ArtifactArtifactType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateArtifactArtifactTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this artifact artifact type based on context it is used
func (m ArtifactArtifactType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
