// Code generated by go-swagger; DO NOT EDIT.

package artifact_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V2beta1IOType Describes the I/O relationship between
// this Artifacts & Parameters and Task
// There are a couple of instances where
// input/outputs have special types such
// as in the case of LoopArguments or
// dsl.Collected outputs.
//
//   - UNSPECIFIED: For validation
//   - TASK_OUTPUT_INPUT: The name seems convoluted, but this aligns with the
//
// sdk naming in TaskInputsSpec.kind.task_output_parameter
// and TaskInputsSpec.kind.task_output_artifact
//   - ITERATOR_INPUT: In a for loop task, introduced via ParallelFor, this type
//
// is used to indicate whether this resolved input belongs
// to a parameterIterator or artifactIterator.
// In such a case the "artifacts" field for IOArtifact.artifacts
// is the list of resolved items for this parallelFor.
//   - ITERATOR_INPUT_RAW: Raw Iterator inputs have no producer
//   - ITERATOR_OUTPUT: When an output is produced by a Runtime Iteration Task
//
// This value is use to differentiate between standard inputs
//   - COLLECTED_INPUTS: Used for dsl.Collected
//
// Usage of this type indicates that all
// Artifacts with8in the IOArtifact.artifacts
// are inputs collected from sub tasks with
// ITERATOR_OUTPUT outputs.
//
// swagger:model v2beta1IOType
type V2beta1IOType string

func NewV2beta1IOType(value V2beta1IOType) *V2beta1IOType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V2beta1IOType.
func (m V2beta1IOType) Pointer() *V2beta1IOType {
	return &m
}

const (

	// V2beta1IOTypeUNSPECIFIED captures enum value "UNSPECIFIED"
	V2beta1IOTypeUNSPECIFIED V2beta1IOType = "UNSPECIFIED"

	// V2beta1IOTypeTASKOUTPUTINPUT captures enum value "TASK_OUTPUT_INPUT"
	V2beta1IOTypeTASKOUTPUTINPUT V2beta1IOType = "TASK_OUTPUT_INPUT"

	// V2beta1IOTypeCOMPONENTINPUT captures enum value "COMPONENT_INPUT"
	V2beta1IOTypeCOMPONENTINPUT V2beta1IOType = "COMPONENT_INPUT"

	// V2beta1IOTypeRUNTIMEVALUEINPUT captures enum value "RUNTIME_VALUE_INPUT"
	V2beta1IOTypeRUNTIMEVALUEINPUT V2beta1IOType = "RUNTIME_VALUE_INPUT"

	// V2beta1IOTypeITERATORINPUT captures enum value "ITERATOR_INPUT"
	V2beta1IOTypeITERATORINPUT V2beta1IOType = "ITERATOR_INPUT"

	// V2beta1IOTypeITERATORINPUTRAW captures enum value "ITERATOR_INPUT_RAW"
	V2beta1IOTypeITERATORINPUTRAW V2beta1IOType = "ITERATOR_INPUT_RAW"

	// V2beta1IOTypeITERATOROUTPUT captures enum value "ITERATOR_OUTPUT"
	V2beta1IOTypeITERATOROUTPUT V2beta1IOType = "ITERATOR_OUTPUT"

	// V2beta1IOTypeCOLLECTEDINPUTS captures enum value "COLLECTED_INPUTS"
	V2beta1IOTypeCOLLECTEDINPUTS V2beta1IOType = "COLLECTED_INPUTS"

	// V2beta1IOTypeOUTPUT captures enum value "OUTPUT"
	V2beta1IOTypeOUTPUT V2beta1IOType = "OUTPUT"

	// V2beta1IOTypeONEOFOUTPUT captures enum value "ONEOF_OUTPUT"
	V2beta1IOTypeONEOFOUTPUT V2beta1IOType = "ONEOF_OUTPUT"
)

// for schema
var v2beta1IOTypeEnum []interface{}

func init() {
	var res []V2beta1IOType
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","TASK_OUTPUT_INPUT","COMPONENT_INPUT","RUNTIME_VALUE_INPUT","ITERATOR_INPUT","ITERATOR_INPUT_RAW","ITERATOR_OUTPUT","COLLECTED_INPUTS","OUTPUT","ONEOF_OUTPUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2beta1IOTypeEnum = append(v2beta1IOTypeEnum, v)
	}
}

func (m V2beta1IOType) validateV2beta1IOTypeEnum(path, location string, value V2beta1IOType) error {
	if err := validate.EnumCase(path, location, value, v2beta1IOTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v2beta1 i o type
func (m V2beta1IOType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV2beta1IOTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v2beta1 i o type based on context it is used
func (m V2beta1IOType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
