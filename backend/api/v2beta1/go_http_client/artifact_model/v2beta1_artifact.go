// Code generated by go-swagger; DO NOT EDIT.

package artifact_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2beta1Artifact Note to be confused with RuntimeArtifact in pipelinespec
//
// swagger:model v2beta1Artifact
type V2beta1Artifact struct {

	// Output only. The unique server generated id of the artifact.
	// Note: Updated id name to be consistent with other api naming patterns (with prefix)
	// Read Only: true
	ArtifactID string `json:"artifact_id,omitempty"`

	// Output only. Create time of the artifact in millisecond since epoch.
	// Note: The type and name is updated from mlmd artifact to be consistent with other backend apis.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Optional. User provided custom properties which are not defined by its type.
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	// Required. The client provided name of the artifact.
	// Note: it seems in MLMD when name was set, it had to be unique for that type_id
	// this restriction is removed here
	// If this is a "Metric" artifact, the name of the metric
	// is treated as the Key in its K/V pair.
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// Used primarily for metrics
	NumberValue float64 `json:"number_value,omitempty"`

	// Required. The name of an ArtifactType. E.g. Dataset
	Type *ArtifactArtifactType `json:"type,omitempty"`

	// The uniform resource identifier of the physical artifact.
	// May be empty if there is no physical artifact.
	URI string `json:"uri,omitempty"`
}

// Validate validates this v2beta1 artifact
func (m *V2beta1Artifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2beta1Artifact) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2beta1Artifact) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2beta1 artifact based on the context it is used
func (m *V2beta1Artifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifactID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2beta1Artifact) contextValidateArtifactID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "artifact_id", "body", string(m.ArtifactID)); err != nil {
		return err
	}

	return nil
}

func (m *V2beta1Artifact) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *V2beta1Artifact) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2beta1Artifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2beta1Artifact) UnmarshalBinary(b []byte) error {
	var res V2beta1Artifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
