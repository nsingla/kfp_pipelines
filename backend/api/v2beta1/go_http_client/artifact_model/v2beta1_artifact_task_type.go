// Code generated by go-swagger; DO NOT EDIT.

package artifact_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V2beta1ArtifactTaskType Describes the I/O relationship between
// this Artifact and Task
//
// swagger:model v2beta1ArtifactTaskType
type V2beta1ArtifactTaskType string

func NewV2beta1ArtifactTaskType(value V2beta1ArtifactTaskType) *V2beta1ArtifactTaskType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V2beta1ArtifactTaskType.
func (m V2beta1ArtifactTaskType) Pointer() *V2beta1ArtifactTaskType {
	return &m
}

const (

	// V2beta1ArtifactTaskTypeINPUT captures enum value "INPUT"
	V2beta1ArtifactTaskTypeINPUT V2beta1ArtifactTaskType = "INPUT"

	// V2beta1ArtifactTaskTypeOUTPUT captures enum value "OUTPUT"
	V2beta1ArtifactTaskTypeOUTPUT V2beta1ArtifactTaskType = "OUTPUT"
)

// for schema
var v2beta1ArtifactTaskTypeEnum []interface{}

func init() {
	var res []V2beta1ArtifactTaskType
	if err := json.Unmarshal([]byte(`["INPUT","OUTPUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2beta1ArtifactTaskTypeEnum = append(v2beta1ArtifactTaskTypeEnum, v)
	}
}

func (m V2beta1ArtifactTaskType) validateV2beta1ArtifactTaskTypeEnum(path, location string, value V2beta1ArtifactTaskType) error {
	if err := validate.EnumCase(path, location, value, v2beta1ArtifactTaskTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v2beta1 artifact task type
func (m V2beta1ArtifactTaskType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV2beta1ArtifactTaskTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v2beta1 artifact task type based on context it is used
func (m V2beta1ArtifactTaskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
