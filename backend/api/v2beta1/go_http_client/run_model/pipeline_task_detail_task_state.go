// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PipelineTaskDetailTaskState Runtime state of a Task
//
// - RUNTIME_STATE_UNSPECIFIED: Default value. This value is not used.
//   - RUNNING: Entity execution is in progress.
//   - SUCCEEDED: Entity completed successfully.
//   - SKIPPED: Entity has been skipped. For example, due to caching.
//   - FAILED: Entity execution has failed.
//
// swagger:model PipelineTaskDetailTaskState
type PipelineTaskDetailTaskState string

func NewPipelineTaskDetailTaskState(value PipelineTaskDetailTaskState) *PipelineTaskDetailTaskState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PipelineTaskDetailTaskState.
func (m PipelineTaskDetailTaskState) Pointer() *PipelineTaskDetailTaskState {
	return &m
}

const (

	// PipelineTaskDetailTaskStateRUNTIMESTATEUNSPECIFIED captures enum value "RUNTIME_STATE_UNSPECIFIED"
	PipelineTaskDetailTaskStateRUNTIMESTATEUNSPECIFIED PipelineTaskDetailTaskState = "RUNTIME_STATE_UNSPECIFIED"

	// PipelineTaskDetailTaskStateRUNNING captures enum value "RUNNING"
	PipelineTaskDetailTaskStateRUNNING PipelineTaskDetailTaskState = "RUNNING"

	// PipelineTaskDetailTaskStateSUCCEEDED captures enum value "SUCCEEDED"
	PipelineTaskDetailTaskStateSUCCEEDED PipelineTaskDetailTaskState = "SUCCEEDED"

	// PipelineTaskDetailTaskStateSKIPPED captures enum value "SKIPPED"
	PipelineTaskDetailTaskStateSKIPPED PipelineTaskDetailTaskState = "SKIPPED"

	// PipelineTaskDetailTaskStateFAILED captures enum value "FAILED"
	PipelineTaskDetailTaskStateFAILED PipelineTaskDetailTaskState = "FAILED"

	// PipelineTaskDetailTaskStateCACHED captures enum value "CACHED"
	PipelineTaskDetailTaskStateCACHED PipelineTaskDetailTaskState = "CACHED"
)

// for schema
var pipelineTaskDetailTaskStateEnum []interface{}

func init() {
	var res []PipelineTaskDetailTaskState
	if err := json.Unmarshal([]byte(`["RUNTIME_STATE_UNSPECIFIED","RUNNING","SUCCEEDED","SKIPPED","FAILED","CACHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineTaskDetailTaskStateEnum = append(pipelineTaskDetailTaskStateEnum, v)
	}
}

func (m PipelineTaskDetailTaskState) validatePipelineTaskDetailTaskStateEnum(path, location string, value PipelineTaskDetailTaskState) error {
	if err := validate.EnumCase(path, location, value, pipelineTaskDetailTaskStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this pipeline task detail task state
func (m PipelineTaskDetailTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePipelineTaskDetailTaskStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this pipeline task detail task state based on context it is used
func (m PipelineTaskDetailTaskState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
