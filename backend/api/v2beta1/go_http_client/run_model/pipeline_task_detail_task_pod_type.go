// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PipelineTaskDetailTaskPodType Name of the corresponding pod assigned by the orchestration engine.
// Also known as node_id.
//
// swagger:model PipelineTaskDetailTaskPodType
type PipelineTaskDetailTaskPodType string

func NewPipelineTaskDetailTaskPodType(value PipelineTaskDetailTaskPodType) *PipelineTaskDetailTaskPodType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PipelineTaskDetailTaskPodType.
func (m PipelineTaskDetailTaskPodType) Pointer() *PipelineTaskDetailTaskPodType {
	return &m
}

const (

	// PipelineTaskDetailTaskPodTypeDRIVER captures enum value "DRIVER"
	PipelineTaskDetailTaskPodTypeDRIVER PipelineTaskDetailTaskPodType = "DRIVER"

	// PipelineTaskDetailTaskPodTypeEXECUTOR captures enum value "EXECUTOR"
	PipelineTaskDetailTaskPodTypeEXECUTOR PipelineTaskDetailTaskPodType = "EXECUTOR"
)

// for schema
var pipelineTaskDetailTaskPodTypeEnum []interface{}

func init() {
	var res []PipelineTaskDetailTaskPodType
	if err := json.Unmarshal([]byte(`["DRIVER","EXECUTOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineTaskDetailTaskPodTypeEnum = append(pipelineTaskDetailTaskPodTypeEnum, v)
	}
}

func (m PipelineTaskDetailTaskPodType) validatePipelineTaskDetailTaskPodTypeEnum(path, location string, value PipelineTaskDetailTaskPodType) error {
	if err := validate.EnumCase(path, location, value, pipelineTaskDetailTaskPodTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this pipeline task detail task pod type
func (m PipelineTaskDetailTaskPodType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePipelineTaskDetailTaskPodTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this pipeline task detail task pod type based on context it is used
func (m PipelineTaskDetailTaskPodType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
