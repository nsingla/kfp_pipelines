// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InputOutputsParameter input outputs parameter
//
// swagger:model InputOutputsParameter
type InputOutputsParameter struct {

	// Optional, this is only included on Runtime Tasks when the parameter name is known.
	Name string `json:"name,omitempty"`

	// Not all Parameters have task producers,
	// For example they can also be Runtime Constants.
	// Whereas in the case of a PipelineChannel, they
	// do have a producer.
	Producer *InputOutputsIOProducer `json:"producer,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this input outputs parameter
func (m *InputOutputsParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProducer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputOutputsParameter) validateProducer(formats strfmt.Registry) error {
	if swag.IsZero(m.Producer) { // not required
		return nil
	}

	if m.Producer != nil {
		if err := m.Producer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("producer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("producer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this input outputs parameter based on the context it is used
func (m *InputOutputsParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputOutputsParameter) contextValidateProducer(ctx context.Context, formats strfmt.Registry) error {

	if m.Producer != nil {

		if swag.IsZero(m.Producer) { // not required
			return nil
		}

		if err := m.Producer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("producer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("producer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputOutputsParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputOutputsParameter) UnmarshalBinary(b []byte) error {
	var res InputOutputsParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
