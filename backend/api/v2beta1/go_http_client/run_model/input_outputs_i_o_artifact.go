// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InputOutputsIOArtifact Align structure with Executor Input
//
// swagger:model InputOutputsIOArtifact
type InputOutputsIOArtifact struct {

	// artifact key
	ArtifactKey string `json:"artifact_key,omitempty"`

	// artifacts
	Artifacts []*V2beta1Artifact `json:"artifacts"`

	// producer
	Producer *V2beta1IOProducer `json:"producer,omitempty"`

	// type
	Type *V2beta1IOType `json:"type,omitempty"`
}

// Validate validates this input outputs i o artifact
func (m *InputOutputsIOArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputOutputsIOArtifact) validateArtifacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Artifacts); i++ {
		if swag.IsZero(m.Artifacts[i]) { // not required
			continue
		}

		if m.Artifacts[i] != nil {
			if err := m.Artifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InputOutputsIOArtifact) validateProducer(formats strfmt.Registry) error {
	if swag.IsZero(m.Producer) { // not required
		return nil
	}

	if m.Producer != nil {
		if err := m.Producer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("producer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("producer")
			}
			return err
		}
	}

	return nil
}

func (m *InputOutputsIOArtifact) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this input outputs i o artifact based on the context it is used
func (m *InputOutputsIOArtifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputOutputsIOArtifact) contextValidateArtifacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Artifacts); i++ {

		if m.Artifacts[i] != nil {

			if swag.IsZero(m.Artifacts[i]) { // not required
				return nil
			}

			if err := m.Artifacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InputOutputsIOArtifact) contextValidateProducer(ctx context.Context, formats strfmt.Registry) error {

	if m.Producer != nil {

		if swag.IsZero(m.Producer) { // not required
			return nil
		}

		if err := m.Producer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("producer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("producer")
			}
			return err
		}
	}

	return nil
}

func (m *InputOutputsIOArtifact) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputOutputsIOArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputOutputsIOArtifact) UnmarshalBinary(b []byte) error {
	var res InputOutputsIOArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
