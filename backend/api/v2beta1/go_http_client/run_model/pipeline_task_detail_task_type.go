// Code generated by go-swagger; DO NOT EDIT.

package run_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PipelineTaskDetailTaskType  - ROOT: Root task replaces Root Execution, it is the top ancestor task to all tasks in the pipeline run
//   - CONDITION: Task Group for Condition Branches
//   - LOOP: Task Group for Loop Iterations
//   - DAG: Generic DAG task type for types like Nested Pipelines
//
// where there is no declarative way to detect this within
// a driver.
//
// swagger:model PipelineTaskDetailTaskType
type PipelineTaskDetailTaskType string

func NewPipelineTaskDetailTaskType(value PipelineTaskDetailTaskType) *PipelineTaskDetailTaskType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PipelineTaskDetailTaskType.
func (m PipelineTaskDetailTaskType) Pointer() *PipelineTaskDetailTaskType {
	return &m
}

const (

	// PipelineTaskDetailTaskTypeROOT captures enum value "ROOT"
	PipelineTaskDetailTaskTypeROOT PipelineTaskDetailTaskType = "ROOT"

	// PipelineTaskDetailTaskTypeRUNTIME captures enum value "RUNTIME"
	PipelineTaskDetailTaskTypeRUNTIME PipelineTaskDetailTaskType = "RUNTIME"

	// PipelineTaskDetailTaskTypeCONDITIONBRANCH captures enum value "CONDITION_BRANCH"
	PipelineTaskDetailTaskTypeCONDITIONBRANCH PipelineTaskDetailTaskType = "CONDITION_BRANCH"

	// PipelineTaskDetailTaskTypeCONDITION captures enum value "CONDITION"
	PipelineTaskDetailTaskTypeCONDITION PipelineTaskDetailTaskType = "CONDITION"

	// PipelineTaskDetailTaskTypeLOOP captures enum value "LOOP"
	PipelineTaskDetailTaskTypeLOOP PipelineTaskDetailTaskType = "LOOP"

	// PipelineTaskDetailTaskTypeLOOPITERATION captures enum value "LOOP_ITERATION"
	PipelineTaskDetailTaskTypeLOOPITERATION PipelineTaskDetailTaskType = "LOOP_ITERATION"

	// PipelineTaskDetailTaskTypeEXITHANDLER captures enum value "EXIT_HANDLER"
	PipelineTaskDetailTaskTypeEXITHANDLER PipelineTaskDetailTaskType = "EXIT_HANDLER"

	// PipelineTaskDetailTaskTypeDAG captures enum value "DAG"
	PipelineTaskDetailTaskTypeDAG PipelineTaskDetailTaskType = "DAG"
)

// for schema
var pipelineTaskDetailTaskTypeEnum []interface{}

func init() {
	var res []PipelineTaskDetailTaskType
	if err := json.Unmarshal([]byte(`["ROOT","RUNTIME","CONDITION_BRANCH","CONDITION","LOOP","LOOP_ITERATION","EXIT_HANDLER","DAG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineTaskDetailTaskTypeEnum = append(pipelineTaskDetailTaskTypeEnum, v)
	}
}

func (m PipelineTaskDetailTaskType) validatePipelineTaskDetailTaskTypeEnum(path, location string, value PipelineTaskDetailTaskType) error {
	if err := validate.EnumCase(path, location, value, pipelineTaskDetailTaskTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this pipeline task detail task type
func (m PipelineTaskDetailTaskType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePipelineTaskDetailTaskTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this pipeline task detail task type based on context it is used
func (m PipelineTaskDetailTaskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
