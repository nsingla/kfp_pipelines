// Code generated by go-swagger; DO NOT EDIT.

package artifact_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new artifact service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new artifact service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new artifact service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for artifact service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateArtifact(params *CreateArtifactParams, opts ...ClientOption) (*CreateArtifactOK, error)

	CreateArtifactTask(params *CreateArtifactTaskParams, opts ...ClientOption) (*CreateArtifactTaskOK, error)

	GetArtifact(params *GetArtifactParams, opts ...ClientOption) (*GetArtifactOK, error)

	ListArtifactTasks(params *ListArtifactTasksParams, opts ...ClientOption) (*ListArtifactTasksOK, error)

	ListArtifacts(params *ListArtifactsParams, opts ...ClientOption) (*ListArtifactsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateArtifact creates a new artifact
*/
func (a *Client) CreateArtifact(params *CreateArtifactParams, opts ...ClientOption) (*CreateArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_artifact",
		Method:             "POST",
		PathPattern:        "/apis/v2beta1/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateArtifactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateArtifactDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateArtifactTask creates an artifact task relationship
*/
func (a *Client) CreateArtifactTask(params *CreateArtifactTaskParams, opts ...ClientOption) (*CreateArtifactTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArtifactTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_artifact_task",
		Method:             "POST",
		PathPattern:        "/apis/v2beta1/artifact_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateArtifactTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArtifactTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateArtifactTaskDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetArtifact finds a specific artifact by ID
*/
func (a *Client) GetArtifact(params *GetArtifactParams, opts ...ClientOption) (*GetArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_artifact",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/artifacts/{artifact_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetArtifactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetArtifactDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListArtifactTasks lists artifact task relationships
*/
func (a *Client) ListArtifactTasks(params *ListArtifactTasksParams, opts ...ClientOption) (*ListArtifactTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArtifactTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_artifact_tasks",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/artifact_tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListArtifactTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArtifactTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListArtifactTasksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListArtifacts finds all artifacts within the specified namespace
*/
func (a *Client) ListArtifacts(params *ListArtifactsParams, opts ...ClientOption) (*ListArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArtifactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list_artifacts",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListArtifactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListArtifactsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
