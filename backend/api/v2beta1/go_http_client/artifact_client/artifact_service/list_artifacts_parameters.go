// Code generated by go-swagger; DO NOT EDIT.

package artifact_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListArtifactsParams creates a new ListArtifactsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListArtifactsParams() *ListArtifactsParams {
	return &ListArtifactsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListArtifactsParamsWithTimeout creates a new ListArtifactsParams object
// with the ability to set a timeout on a request.
func NewListArtifactsParamsWithTimeout(timeout time.Duration) *ListArtifactsParams {
	return &ListArtifactsParams{
		timeout: timeout,
	}
}

// NewListArtifactsParamsWithContext creates a new ListArtifactsParams object
// with the ability to set a context for a request.
func NewListArtifactsParamsWithContext(ctx context.Context) *ListArtifactsParams {
	return &ListArtifactsParams{
		Context: ctx,
	}
}

// NewListArtifactsParamsWithHTTPClient creates a new ListArtifactsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListArtifactsParamsWithHTTPClient(client *http.Client) *ListArtifactsParams {
	return &ListArtifactsParams{
		HTTPClient: client,
	}
}

/*
ListArtifactsParams contains all the parameters to send to the API endpoint

	for the list artifacts operation.

	Typically these are written to a http.Request.
*/
type ListArtifactsParams struct {

	/* Filter.

	     A url-encoded, JSON-serialized filter protocol buffer (see
	[filter.proto](https://github.com/kubeflow/artifacts/blob/master/backend/api/filter.proto)).
	*/
	Filter *string

	/* Namespace.

	   Optional input. Namespace for the artifacts.
	*/
	Namespace *string

	/* PageSize.

	     The number of artifacts to be listed per page. If there are more artifacts
	than this number, the response message will contain a valid value in the
	nextPageToken field.

	     Format: int32
	*/
	PageSize *int32

	/* PageToken.

	   A page token to request the results page.
	*/
	PageToken *string

	/* SortBy.

	     Sorting order in form of "field_name", "field_name asc" or "field_name desc".
	Ascending by default.
	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list artifacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListArtifactsParams) WithDefaults() *ListArtifactsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list artifacts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListArtifactsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list artifacts params
func (o *ListArtifactsParams) WithTimeout(timeout time.Duration) *ListArtifactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list artifacts params
func (o *ListArtifactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list artifacts params
func (o *ListArtifactsParams) WithContext(ctx context.Context) *ListArtifactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list artifacts params
func (o *ListArtifactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list artifacts params
func (o *ListArtifactsParams) WithHTTPClient(client *http.Client) *ListArtifactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list artifacts params
func (o *ListArtifactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the list artifacts params
func (o *ListArtifactsParams) WithFilter(filter *string) *ListArtifactsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list artifacts params
func (o *ListArtifactsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithNamespace adds the namespace to the list artifacts params
func (o *ListArtifactsParams) WithNamespace(namespace *string) *ListArtifactsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list artifacts params
func (o *ListArtifactsParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithPageSize adds the pageSize to the list artifacts params
func (o *ListArtifactsParams) WithPageSize(pageSize *int32) *ListArtifactsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list artifacts params
func (o *ListArtifactsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the list artifacts params
func (o *ListArtifactsParams) WithPageToken(pageToken *string) *ListArtifactsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list artifacts params
func (o *ListArtifactsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithSortBy adds the sortBy to the list artifacts params
func (o *ListArtifactsParams) WithSortBy(sortBy *string) *ListArtifactsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list artifacts params
func (o *ListArtifactsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListArtifactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
