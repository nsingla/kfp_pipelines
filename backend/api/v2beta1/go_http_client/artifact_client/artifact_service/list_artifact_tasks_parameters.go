// Code generated by go-swagger; DO NOT EDIT.

package artifact_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListArtifactTasksParams creates a new ListArtifactTasksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListArtifactTasksParams() *ListArtifactTasksParams {
	return &ListArtifactTasksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListArtifactTasksParamsWithTimeout creates a new ListArtifactTasksParams object
// with the ability to set a timeout on a request.
func NewListArtifactTasksParamsWithTimeout(timeout time.Duration) *ListArtifactTasksParams {
	return &ListArtifactTasksParams{
		timeout: timeout,
	}
}

// NewListArtifactTasksParamsWithContext creates a new ListArtifactTasksParams object
// with the ability to set a context for a request.
func NewListArtifactTasksParamsWithContext(ctx context.Context) *ListArtifactTasksParams {
	return &ListArtifactTasksParams{
		Context: ctx,
	}
}

// NewListArtifactTasksParamsWithHTTPClient creates a new ListArtifactTasksParams object
// with the ability to set a custom HTTPClient for a request.
func NewListArtifactTasksParamsWithHTTPClient(client *http.Client) *ListArtifactTasksParams {
	return &ListArtifactTasksParams{
		HTTPClient: client,
	}
}

/*
ListArtifactTasksParams contains all the parameters to send to the API endpoint

	for the list artifact tasks operation.

	Typically these are written to a http.Request.
*/
type ListArtifactTasksParams struct {

	/* ArtifactIds.

	     Optional, filter artifact task by a set of artifact_ids
	We can also likely just rely on filter for this and omit this field
	*/
	ArtifactIds []string

	// Filter.
	Filter *string

	// PageSize.
	//
	// Format: int32
	PageSize *int32

	// PageToken.
	PageToken *string

	/* RunIds.

	   Optional, filter artifact task by a set of run_ids
	*/
	RunIds []string

	// SortBy.
	SortBy *string

	/* TaskIds.

	     Optional, filter artifact task by a set of task_ids
	We can also likely just rely on filter for this and omit this field
	*/
	TaskIds []string

	/* Type.

	   Optional. Only list artifact tasks that have artifacts of this type.

	   Default: "INPUT"
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list artifact tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListArtifactTasksParams) WithDefaults() *ListArtifactTasksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list artifact tasks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListArtifactTasksParams) SetDefaults() {
	var (
		typeVarDefault = string("INPUT")
	)

	val := ListArtifactTasksParams{
		Type: &typeVarDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list artifact tasks params
func (o *ListArtifactTasksParams) WithTimeout(timeout time.Duration) *ListArtifactTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list artifact tasks params
func (o *ListArtifactTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list artifact tasks params
func (o *ListArtifactTasksParams) WithContext(ctx context.Context) *ListArtifactTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list artifact tasks params
func (o *ListArtifactTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list artifact tasks params
func (o *ListArtifactTasksParams) WithHTTPClient(client *http.Client) *ListArtifactTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list artifact tasks params
func (o *ListArtifactTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactIds adds the artifactIds to the list artifact tasks params
func (o *ListArtifactTasksParams) WithArtifactIds(artifactIds []string) *ListArtifactTasksParams {
	o.SetArtifactIds(artifactIds)
	return o
}

// SetArtifactIds adds the artifactIds to the list artifact tasks params
func (o *ListArtifactTasksParams) SetArtifactIds(artifactIds []string) {
	o.ArtifactIds = artifactIds
}

// WithFilter adds the filter to the list artifact tasks params
func (o *ListArtifactTasksParams) WithFilter(filter *string) *ListArtifactTasksParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list artifact tasks params
func (o *ListArtifactTasksParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPageSize adds the pageSize to the list artifact tasks params
func (o *ListArtifactTasksParams) WithPageSize(pageSize *int32) *ListArtifactTasksParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list artifact tasks params
func (o *ListArtifactTasksParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the list artifact tasks params
func (o *ListArtifactTasksParams) WithPageToken(pageToken *string) *ListArtifactTasksParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list artifact tasks params
func (o *ListArtifactTasksParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithRunIds adds the runIds to the list artifact tasks params
func (o *ListArtifactTasksParams) WithRunIds(runIds []string) *ListArtifactTasksParams {
	o.SetRunIds(runIds)
	return o
}

// SetRunIds adds the runIds to the list artifact tasks params
func (o *ListArtifactTasksParams) SetRunIds(runIds []string) {
	o.RunIds = runIds
}

// WithSortBy adds the sortBy to the list artifact tasks params
func (o *ListArtifactTasksParams) WithSortBy(sortBy *string) *ListArtifactTasksParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list artifact tasks params
func (o *ListArtifactTasksParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithTaskIds adds the taskIds to the list artifact tasks params
func (o *ListArtifactTasksParams) WithTaskIds(taskIds []string) *ListArtifactTasksParams {
	o.SetTaskIds(taskIds)
	return o
}

// SetTaskIds adds the taskIds to the list artifact tasks params
func (o *ListArtifactTasksParams) SetTaskIds(taskIds []string) {
	o.TaskIds = taskIds
}

// WithType adds the typeVar to the list artifact tasks params
func (o *ListArtifactTasksParams) WithType(typeVar *string) *ListArtifactTasksParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list artifact tasks params
func (o *ListArtifactTasksParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *ListArtifactTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ArtifactIds != nil {

		// binding items for artifact_ids
		joinedArtifactIds := o.bindParamArtifactIds(reg)

		// query array param artifact_ids
		if err := r.SetQueryParam("artifact_ids", joinedArtifactIds...); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.RunIds != nil {

		// binding items for run_ids
		joinedRunIds := o.bindParamRunIds(reg)

		// query array param run_ids
		if err := r.SetQueryParam("run_ids", joinedRunIds...); err != nil {
			return err
		}
	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.TaskIds != nil {

		// binding items for task_ids
		joinedTaskIds := o.bindParamTaskIds(reg)

		// query array param task_ids
		if err := r.SetQueryParam("task_ids", joinedTaskIds...); err != nil {
			return err
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListArtifactTasks binds the parameter artifact_ids
func (o *ListArtifactTasksParams) bindParamArtifactIds(formats strfmt.Registry) []string {
	artifactIdsIR := o.ArtifactIds

	var artifactIdsIC []string
	for _, artifactIdsIIR := range artifactIdsIR { // explode []string

		artifactIdsIIV := artifactIdsIIR // string as string
		artifactIdsIC = append(artifactIdsIC, artifactIdsIIV)
	}

	// items.CollectionFormat: "multi"
	artifactIdsIS := swag.JoinByFormat(artifactIdsIC, "multi")

	return artifactIdsIS
}

// bindParamListArtifactTasks binds the parameter run_ids
func (o *ListArtifactTasksParams) bindParamRunIds(formats strfmt.Registry) []string {
	runIdsIR := o.RunIds

	var runIdsIC []string
	for _, runIdsIIR := range runIdsIR { // explode []string

		runIdsIIV := runIdsIIR // string as string
		runIdsIC = append(runIdsIC, runIdsIIV)
	}

	// items.CollectionFormat: "multi"
	runIdsIS := swag.JoinByFormat(runIdsIC, "multi")

	return runIdsIS
}

// bindParamListArtifactTasks binds the parameter task_ids
func (o *ListArtifactTasksParams) bindParamTaskIds(formats strfmt.Registry) []string {
	taskIdsIR := o.TaskIds

	var taskIdsIC []string
	for _, taskIdsIIR := range taskIdsIR { // explode []string

		taskIdsIIV := taskIdsIIR // string as string
		taskIdsIC = append(taskIdsIC, taskIdsIIV)
	}

	// items.CollectionFormat: "multi"
	taskIdsIS := swag.JoinByFormat(taskIdsIC, "multi")

	return taskIdsIS
}
