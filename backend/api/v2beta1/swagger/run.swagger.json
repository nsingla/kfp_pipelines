{
  "swagger": "2.0",
  "info": {
    "title": "backend/api/v2beta1/run.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "RunService"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v2beta1/runs": {
      "get": {
        "summary": "Finds all runs in an experiment given by experiment ID.\nIf experiment id is not specified, finds all runs across all experiments.",
        "operationId": "RunService_ListRuns",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1ListRunsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Optional input field. Filters based on the namespace.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment. If empty, response includes runs across all experiments.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_token",
            "description": "A page token to request the next page of results. The token is acquired\nfrom the nextPageToken field of the response from the previous\nListRuns call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "The number of runs to be listed per page. If there are more runs than this\nnumber, the response message will contain a nextPageToken field you can use\nto fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_by",
            "description": "Can be format of \"field_name\", \"field_name asc\" or \"field_name desc\"\n(Example, \"name asc\" or \"id desc\"). Ascending by default.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "A url-encoded, JSON-serialized Filter protocol buffer (see\n[filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      },
      "post": {
        "summary": "Creates a new run in an experiment specified by experiment ID.\nIf experiment ID is not specified, the run is created in the default experiment.",
        "operationId": "RunService_CreateRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1Run"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run",
            "description": "Run to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2beta1Run"
            }
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}": {
      "get": {
        "summary": "Finds a specific run by ID.",
        "operationId": "RunService_GetRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1Run"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      },
      "delete": {
        "summary": "Deletes a run in an experiment given by run ID and experiment ID.",
        "operationId": "RunService_DeleteRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read": {
      "get": {
        "summary": "Finds artifact data in a run.",
        "operationId": "RunService_ReadArtifact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1ReadArtifactResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "ID of the run.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "node_id",
            "description": "ID of the running node.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifact_name",
            "description": "Name of the artifact.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:archive": {
      "post": {
        "summary": "Archives a run in an experiment given by run ID and experiment ID.",
        "operationId": "RunService_ArchiveRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be archived.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:retry": {
      "post": {
        "summary": "Re-initiates a failed or terminated run.",
        "operationId": "RunService_RetryRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be retried.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:terminate": {
      "post": {
        "summary": "Terminates an active run.",
        "operationId": "RunService_TerminateRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be terminated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/runs/{run_id}:unarchive": {
      "post": {
        "summary": "Restores an archived run in an experiment given by run ID and experiment ID.",
        "operationId": "RunService_UnarchiveRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "description": "The ID of the run to be restored.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the parent experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/tasks": {
      "get": {
        "summary": "Lists tasks with optional filtering.",
        "operationId": "list_tasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1ListTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent_id",
            "description": "List all tasks with this parent task.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "List all tasks for this run.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      },
      "post": {
        "summary": "Creates a new task.",
        "operationId": "create_task",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1PipelineTaskDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2beta1PipelineTaskDetail"
            }
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v2beta1/tasks/{task_id}": {
      "get": {
        "summary": "Gets a specific task by ID.",
        "operationId": "get_task",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1PipelineTaskDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      },
      "patch": {
        "summary": "Updates an existing task.",
        "operationId": "update_task",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1PipelineTaskDetail"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2beta1PipelineTaskDetail"
            }
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    }
  },
  "definitions": {
    "ArtifactArtifactType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "Artifact",
        "Model",
        "Dataset",
        "HTML",
        "Markdown",
        "Metric",
        "ClassificationMetric",
        "SlicedClassificationMetric"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": " - TYPE_UNSPECIFIED: default; treated as \"not set\"\nreject if unset."
    },
    "InputOutputsIOArtifact": {
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1Artifact"
          },
          "title": "An artifact input can be a list of artifacts??\nTODO(HumairAK): In DB we need to create an artifact-task for each artifact for a given producer id/key\nWhen reading artifacts for a task, we need to collect all artifacts that share the same producer key\nand include it in one artifacts list. So if you may have:\n[]IOArtifact{ { \"artifacts\": [ {artifact_a}, {artifact_b} ], \"producer\": {\"key\": \"input_a\"} }, { \"artifacts\": [...], \"producer\": {\"key\": \"input_b\"} } }"
        },
        "type": {
          "$ref": "#/definitions/v2beta1IOType",
          "title": "TODO(HumairAK) add this to ArtifactTask column"
        },
        "parameter_name": {
          "type": "string",
          "description": "This is included on Runtime Tasks when the parameter name is known."
        },
        "producer": {
          "$ref": "#/definitions/InputOutputsIOProducer",
          "description": "Handle Pipeline Channel case."
        }
      },
      "title": "Align structure with Executor Input"
    },
    "InputOutputsIOProducer": {
      "type": "object",
      "properties": {
        "task_name": {
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "This would be the equivalent of output_parameter_key from the upstream task\nwhen it's a parameter input, or output_artifact_key when it is an Artifact."
        },
        "iteration": {
          "type": "integer",
          "format": "int32",
          "title": "When a source is from an iteration Runtime task type inside a ParallelFor"
        }
      }
    },
    "InputOutputsParameter": {
      "type": "object",
      "properties": {
        "value": {
          "title": "Required"
        },
        "type": {
          "$ref": "#/definitions/v2beta1IOType",
          "title": "Required"
        },
        "parameter_name": {
          "type": "string",
          "description": "Optional, this is only included on Runtime Tasks when the parameter name is known."
        },
        "producer": {
          "$ref": "#/definitions/InputOutputsIOProducer",
          "description": "Handle Pipeline Channel case."
        }
      }
    },
    "PipelineTaskDetailChildTask": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "description": "System-generated ID of a task."
        },
        "name": {
          "type": "string"
        }
      },
      "description": "A dependent task that requires this one to succeed.\nRepresented by either task_id or pod_name."
    },
    "PipelineTaskDetailInputOutputs": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InputOutputsParameter"
          },
          "title": "For Loops parameters are filled with resolved\nparameterIterator.items"
        },
        "artifacts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/InputOutputsIOArtifact"
          },
          "description": "Output Only. To create Artifacts for a task are created\nvia ArtifactTasks.\nFor parallelFor \u0026 dsl.Collected case, each IO Artifact\nrepresents one dsl.Collected set of artifacts.\nThis is because each dsl.Collected has one source task.\nTODO(Humair): Actually no it doesn't, each iteration\nhas a container task, and we should store the\n\"iteration\" count for that specific task, and then\nas part of \"Source\" we can include the iteration for\nthat specific task. This will allow us to support a\ncollection of \"Lists\" in the future as well."
        }
      }
    },
    "PipelineTaskDetailStatusMetadata": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "custom_properties": {
          "type": "object",
          "additionalProperties": {}
        }
      },
      "title": "Custom status metadata, this can be used to provide\nadditional status info for a given task during runtime"
    },
    "PipelineTaskDetailTaskPod": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/PipelineTaskDetailTaskPodType"
        }
      }
    },
    "PipelineTaskDetailTaskPodType": {
      "type": "string",
      "enum": [
        "DRIVER",
        "EXECUTOR"
      ],
      "default": "DRIVER",
      "description": "Name of the corresponding pod assigned by the orchestration engine.\nAlso known as node_id."
    },
    "PipelineTaskDetailTaskState": {
      "type": "string",
      "enum": [
        "RUNTIME_STATE_UNSPECIFIED",
        "RUNNING",
        "SUCCEEDED",
        "SKIPPED",
        "FAILED",
        "CACHED"
      ],
      "default": "RUNTIME_STATE_UNSPECIFIED",
      "description": "- RUNTIME_STATE_UNSPECIFIED: Default value. This value is not used.\n - RUNNING: Entity execution is in progress.\n - SUCCEEDED: Entity completed successfully.\n - SKIPPED: Entity has been skipped. For example, due to caching.\n - FAILED: Entity execution has failed.",
      "title": "Runtime state of a Task"
    },
    "PipelineTaskDetailTaskType": {
      "type": "string",
      "enum": [
        "ROOT",
        "RUNTIME",
        "CONDITION_BRANCH",
        "CONDITION",
        "LOOP",
        "EXIT_HANDLER",
        "DAG"
      ],
      "default": "ROOT",
      "description": " - ROOT: Root task replaces Root Execution, it is the top ancestor task to all tasks in the pipeline run\n - CONDITION_BRANCH: Condition Branch is the wrapper If block\n - CONDITION: Condition is an individual if branch (this feels counter intuitive but this is how it's named in the SDK IR)\nand we are consistent with the naming here.\n - LOOP: Task Group for Condition Branches\nTask Group for Loop Iterations\n - DAG: Generic DAG task type for types like Nested Pipelines\nwhere there is no declarative way to detect this within\na driver."
    },
    "PipelineTaskDetailTypeAttributes": {
      "type": "object",
      "properties": {
        "iteration_index": {
          "type": "string",
          "format": "int64",
          "title": "Optional. Applies to type Runtime that is an iteration"
        },
        "iteration_count": {
          "type": "string",
          "format": "int64",
          "title": "Optional. Applies to type LOOP"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "v2beta1Artifact": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "type": "string",
          "title": "Output only. The unique server generated id of the artifact.\nNote: Updated id name to be consistent with other api naming patterns (with prefix)",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Required. The client provided name of the artifact.\nNote: it seems in MLMD when name was set, it had to be unique for that type_id\nthis restriction is removed here\nIf this is a \"Metric\" artifact, the name of the metric\nis treated as the Key in its K/V pair."
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ArtifactArtifactType",
          "title": "Required. The name of an ArtifactType. E.g. Dataset"
        },
        "uri": {
          "type": "string",
          "description": "The uniform resource identifier of the physical artifact.\nMay be empty if there is no physical artifact."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {},
          "description": "Optional. User provided custom properties which are not defined by its type."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "title": "Used primarily for metrics"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. Create time of the artifact in millisecond since epoch.\nNote: The type and name is updated from mlmd artifact to be consistent with other backend apis.",
          "readOnly": true
        },
        "namespace": {
          "type": "string"
        }
      },
      "title": "Note to be confused with RuntimeArtifact in pipelinespec"
    },
    "v2beta1IOType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INPUT",
        "OUTPUT",
        "ITERATOR_INPUT",
        "ITERATOR_OUTPUT"
      ],
      "default": "UNSPECIFIED",
      "description": "Describes the I/O relationship between\nthis Artifacts \u0026 Parameters and Task\nThere are a couple of instances where\ninput/outputs have special types such\nas in the case of LoopArguments or\ndsl.Collected outputs.\n\n - UNSPECIFIED: For validation\n - INPUT: Standard Input/Output types\n - ITERATOR_INPUT: In a for loop task, introduced via ParallelFor, this type\nis used to indicate whether this resolved input belongs\nto a parameterIterator or artifactIterator.\n - ITERATOR_OUTPUT: Used for dsl.Collected\nwhen used, all Parameter values, or Artifact list items\nare considered the collected values of this loop's output"
    },
    "v2beta1ListRunsResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1Run"
          },
          "description": "List of retrieved runs."
        },
        "total_size": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of runs for the given query."
        },
        "next_page_token": {
          "type": "string",
          "description": "The token to list the next page of runs."
        }
      }
    },
    "v2beta1ListTasksResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1PipelineTaskDetail"
          }
        },
        "next_page_token": {
          "type": "string"
        },
        "total_size": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v2beta1PipelineTaskDetail": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string",
          "description": "User specified name of a task that is defined in\n[Pipeline.spec][]."
        },
        "task_id": {
          "type": "string",
          "description": "System-generated ID of a task."
        },
        "run_id": {
          "type": "string",
          "description": "ID of the parent run."
        },
        "pods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PipelineTaskDetailTaskPod"
          }
        },
        "cache_fingerprint": {
          "type": "string"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "description": "Creation time of a task."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Starting time of a task."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Completion time of a task."
        },
        "status": {
          "$ref": "#/definitions/PipelineTaskDetailTaskState"
        },
        "status_metadata": {
          "$ref": "#/definitions/PipelineTaskDetailStatusMetadata"
        },
        "state_history": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1RuntimeStatus"
          },
          "description": "A sequence of task statuses. This field keeps a record\nof state transitions."
        },
        "type": {
          "$ref": "#/definitions/PipelineTaskDetailTaskType"
        },
        "type_attributes": {
          "$ref": "#/definitions/PipelineTaskDetailTypeAttributes"
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus",
          "description": "The error that occurred during task execution.\nOnly populated when the task is in FAILED or CANCELED state."
        },
        "parent_task_id": {
          "type": "string",
          "description": "ID of the parent task if the task is within a component scope.\nEmpty if the task is at the root level."
        },
        "child_tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PipelineTaskDetailChildTask"
          },
          "description": "Sequence of dependent tasks."
        },
        "inputs": {
          "$ref": "#/definitions/PipelineTaskDetailInputOutputs"
        },
        "outputs": {
          "$ref": "#/definitions/PipelineTaskDetailInputOutputs"
        }
      },
      "description": "Runtime information of a task execution."
    },
    "v2beta1PipelineVersionReference": {
      "type": "object",
      "properties": {
        "pipeline_id": {
          "type": "string",
          "description": "Input. Required. Unique ID of the parent pipeline."
        },
        "pipeline_version_id": {
          "type": "string",
          "description": "Input. Optional. Unique ID of an existing pipeline version. If unset, the latest pipeline version is used."
        }
      },
      "description": "Reference to an existing pipeline version."
    },
    "v2beta1ReadArtifactResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Byte array of the artifact content."
        }
      }
    },
    "v2beta1Run": {
      "type": "object",
      "properties": {
        "experiment_id": {
          "type": "string",
          "description": "Input. ID of the parent experiment.\nThe default experiment ID will be used if this is not specified."
        },
        "run_id": {
          "type": "string",
          "description": "Output. Unique run ID. Generated by API server."
        },
        "display_name": {
          "type": "string",
          "description": "Required input. Name provided by user,\nor auto generated if run is created by a recurring run."
        },
        "storage_state": {
          "$ref": "#/definitions/v2beta1RunStorageState",
          "description": "Output. Specifies whether this run is in archived or available mode."
        },
        "description": {
          "type": "string",
          "description": "Optional input. Short description of the run."
        },
        "pipeline_version_id": {
          "type": "string",
          "description": "This field is Deprecated. The pipeline version id is under pipeline_version_reference for v2."
        },
        "pipeline_spec": {
          "type": "object",
          "description": "Pipeline spec."
        },
        "pipeline_version_reference": {
          "$ref": "#/definitions/v2beta1PipelineVersionReference",
          "description": "Reference to a pipeline containing pipeline_id and optionally the pipeline_version_id."
        },
        "runtime_config": {
          "$ref": "#/definitions/v2beta1RuntimeConfig",
          "description": "Required input. Runtime config of the run."
        },
        "service_account": {
          "type": "string",
          "description": "Optional input. Specifies which kubernetes service account is used."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. Creation time of the run."
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. When this run is scheduled to start. This could be different from\ncreated_at. For example, if a run is from a backfilling job that was supposed\nto run 2 month ago, the created_at will be 2 month behind scheduled_at."
        },
        "finished_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. Completion of the run."
        },
        "state": {
          "$ref": "#/definitions/v2beta1RuntimeState",
          "description": "Output. Runtime state of a run."
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus",
          "description": "In case any error happens retrieving a run field, only run ID\nand the error message is returned. Client has the flexibility of choosing\nhow to handle the error. This is especially useful during listing call."
        },
        "run_details": {
          "$ref": "#/definitions/v2beta1RunDetails",
          "title": "Output. Runtime details of a run.\nEither remove or deprecate this"
        },
        "recurring_run_id": {
          "type": "string",
          "description": "ID of the recurring run that triggered this run."
        },
        "state_history": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1RuntimeStatus"
          },
          "description": "Output. A sequence of run statuses. This field keeps a record\nof state transitions."
        },
        "pipeline_reference": {
          "$ref": "#/definitions/v2beta1PipelineVersionReference",
          "description": "Output only. Reference to the pipeline used for this run.",
          "readOnly": true
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1PipelineTaskDetail"
          }
        }
      }
    },
    "v2beta1RunDetails": {
      "type": "object",
      "properties": {
        "pipeline_context_id": {
          "type": "string",
          "format": "int64",
          "description": "Pipeline context ID of a run."
        },
        "pipeline_run_context_id": {
          "type": "string",
          "format": "int64",
          "description": "Pipeline run context ID of a run."
        },
        "task_details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v2beta1PipelineTaskDetail"
          },
          "description": "Runtime details of the tasks that belong to the run."
        }
      },
      "description": "Runtime details of a run."
    },
    "v2beta1RunStorageState": {
      "type": "string",
      "enum": [
        "STORAGE_STATE_UNSPECIFIED",
        "AVAILABLE",
        "ARCHIVED"
      ],
      "default": "STORAGE_STATE_UNSPECIFIED",
      "description": "Describes whether an entity is available or archived.\n\n - STORAGE_STATE_UNSPECIFIED: Default state. This state in not used\n - AVAILABLE: Entity is available.\n - ARCHIVED: Entity is archived."
    },
    "v2beta1RuntimeConfig": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {},
          "description": "The runtime parameters of the Pipeline. The parameters will be\nused to replace the placeholders at runtime."
        },
        "pipeline_root": {
          "type": "string",
          "title": "A path in a object store bucket which will be treated as the root\noutput directory of the pipeline. It is used by the system to\ngenerate the paths of output artifacts. \nRef:(https://www.kubeflow.org/docs/components/pipelines/pipeline-root/)"
        }
      },
      "description": "The runtime config."
    },
    "v2beta1RuntimeState": {
      "type": "string",
      "enum": [
        "RUNTIME_STATE_UNSPECIFIED",
        "PENDING",
        "RUNNING",
        "SUCCEEDED",
        "SKIPPED",
        "FAILED",
        "CANCELING",
        "CANCELED",
        "PAUSED"
      ],
      "default": "RUNTIME_STATE_UNSPECIFIED",
      "description": "Describes the runtime state of an entity.\n\n - RUNTIME_STATE_UNSPECIFIED: Default value. This value is not used.\n - PENDING: Service is preparing to execute an entity.\n - RUNNING: Entity execution is in progress.\n - SUCCEEDED: Entity completed successfully.\n - SKIPPED: Entity has been skipped. For example, due to caching.\n - FAILED: Entity execution has failed.\n - CANCELING: Entity is being canceled. From this state, an entity may only\nchange its state to SUCCEEDED, FAILED or CANCELED.\n - CANCELED: Entity has been canceled.\n - PAUSED: Entity has been paused. It can be resumed."
    },
    "v2beta1RuntimeStatus": {
      "type": "object",
      "properties": {
        "update_time": {
          "type": "string",
          "format": "date-time",
          "description": "Update time of this state."
        },
        "state": {
          "$ref": "#/definitions/v2beta1RuntimeState",
          "description": "The state of a runtime instance."
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus",
          "description": "The error that occurred during the state. May be set when the state is\nany of the non-final states (PENDING/RUNNING/CANCELING) or FAILED state.\nIf the state is FAILED, the error here is final and not going to be\nretried. If the state is a non-final state, the error indicates that a\nsystem-error being retried."
        }
      },
      "description": "Timestamped representation of a runtime state with an optional error."
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
