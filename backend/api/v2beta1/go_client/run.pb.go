// Copyright 2018 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: backend/api/v2beta1/run.proto

package go_client

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the runtime state of an entity.
type RuntimeState int32

const (
	// Default value. This value is not used.
	RuntimeState_RUNTIME_STATE_UNSPECIFIED RuntimeState = 0
	// Service is preparing to execute an entity.
	RuntimeState_PENDING RuntimeState = 1
	// Entity execution is in progress.
	RuntimeState_RUNNING RuntimeState = 2
	// Entity completed successfully.
	RuntimeState_SUCCEEDED RuntimeState = 3
	// Entity has been skipped. For example, due to caching.
	RuntimeState_SKIPPED RuntimeState = 4
	// Entity execution has failed.
	RuntimeState_FAILED RuntimeState = 5
	// Entity is being canceled. From this state, an entity may only
	// change its state to SUCCEEDED, FAILED or CANCELED.
	RuntimeState_CANCELING RuntimeState = 6
	// Entity has been canceled.
	RuntimeState_CANCELED RuntimeState = 7
	// Entity has been paused. It can be resumed.
	RuntimeState_PAUSED RuntimeState = 8
)

// Enum value maps for RuntimeState.
var (
	RuntimeState_name = map[int32]string{
		0: "RUNTIME_STATE_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "SUCCEEDED",
		4: "SKIPPED",
		5: "FAILED",
		6: "CANCELING",
		7: "CANCELED",
		8: "PAUSED",
	}
	RuntimeState_value = map[string]int32{
		"RUNTIME_STATE_UNSPECIFIED": 0,
		"PENDING":                   1,
		"RUNNING":                   2,
		"SUCCEEDED":                 3,
		"SKIPPED":                   4,
		"FAILED":                    5,
		"CANCELING":                 6,
		"CANCELED":                  7,
		"PAUSED":                    8,
	}
)

func (x RuntimeState) Enum() *RuntimeState {
	p := new(RuntimeState)
	*p = x
	return p
}

func (x RuntimeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeState) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[0].Descriptor()
}

func (RuntimeState) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[0]
}

func (x RuntimeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeState.Descriptor instead.
func (RuntimeState) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{0}
}

// Describes whether an entity is available or archived.
type Run_StorageState int32

const (
	// Default state. This state in not used
	Run_STORAGE_STATE_UNSPECIFIED Run_StorageState = 0
	// Entity is available.
	Run_AVAILABLE Run_StorageState = 1
	// Entity is archived.
	Run_ARCHIVED Run_StorageState = 2
)

// Enum value maps for Run_StorageState.
var (
	Run_StorageState_name = map[int32]string{
		0: "STORAGE_STATE_UNSPECIFIED",
		1: "AVAILABLE",
		2: "ARCHIVED",
	}
	Run_StorageState_value = map[string]int32{
		"STORAGE_STATE_UNSPECIFIED": 0,
		"AVAILABLE":                 1,
		"ARCHIVED":                  2,
	}
)

func (x Run_StorageState) Enum() *Run_StorageState {
	p := new(Run_StorageState)
	*p = x
	return p
}

func (x Run_StorageState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Run_StorageState) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[1].Descriptor()
}

func (Run_StorageState) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[1]
}

func (x Run_StorageState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Run_StorageState.Descriptor instead.
func (Run_StorageState) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{0, 0}
}

// Name of the corresponding pod assigned by the orchestration engine.
// Also known as node_id.
type PipelineTaskDetail_TaskPodType int32

const (
	PipelineTaskDetail_DRIVER   PipelineTaskDetail_TaskPodType = 0
	PipelineTaskDetail_EXECUTOR PipelineTaskDetail_TaskPodType = 1
)

// Enum value maps for PipelineTaskDetail_TaskPodType.
var (
	PipelineTaskDetail_TaskPodType_name = map[int32]string{
		0: "DRIVER",
		1: "EXECUTOR",
	}
	PipelineTaskDetail_TaskPodType_value = map[string]int32{
		"DRIVER":   0,
		"EXECUTOR": 1,
	}
)

func (x PipelineTaskDetail_TaskPodType) Enum() *PipelineTaskDetail_TaskPodType {
	p := new(PipelineTaskDetail_TaskPodType)
	*p = x
	return p
}

func (x PipelineTaskDetail_TaskPodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineTaskDetail_TaskPodType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[2].Descriptor()
}

func (PipelineTaskDetail_TaskPodType) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[2]
}

func (x PipelineTaskDetail_TaskPodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineTaskDetail_TaskPodType.Descriptor instead.
func (PipelineTaskDetail_TaskPodType) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 0}
}

// Runtime state of a Task
type PipelineTaskDetail_TaskState int32

const (
	// Default value. This value is not used.
	PipelineTaskDetail_RUNTIME_STATE_UNSPECIFIED PipelineTaskDetail_TaskState = 0
	// Entity execution is in progress.
	PipelineTaskDetail_RUNNING PipelineTaskDetail_TaskState = 1
	// Entity completed successfully.
	PipelineTaskDetail_SUCCEEDED PipelineTaskDetail_TaskState = 2
	// Entity has been skipped. For example, due to caching.
	PipelineTaskDetail_SKIPPED PipelineTaskDetail_TaskState = 3
	// Entity execution has failed.
	PipelineTaskDetail_FAILED PipelineTaskDetail_TaskState = 4
	PipelineTaskDetail_CACHED PipelineTaskDetail_TaskState = 5
)

// Enum value maps for PipelineTaskDetail_TaskState.
var (
	PipelineTaskDetail_TaskState_name = map[int32]string{
		0: "RUNTIME_STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "SUCCEEDED",
		3: "SKIPPED",
		4: "FAILED",
		5: "CACHED",
	}
	PipelineTaskDetail_TaskState_value = map[string]int32{
		"RUNTIME_STATE_UNSPECIFIED": 0,
		"RUNNING":                   1,
		"SUCCEEDED":                 2,
		"SKIPPED":                   3,
		"FAILED":                    4,
		"CACHED":                    5,
	}
)

func (x PipelineTaskDetail_TaskState) Enum() *PipelineTaskDetail_TaskState {
	p := new(PipelineTaskDetail_TaskState)
	*p = x
	return p
}

func (x PipelineTaskDetail_TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineTaskDetail_TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[3].Descriptor()
}

func (PipelineTaskDetail_TaskState) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[3]
}

func (x PipelineTaskDetail_TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineTaskDetail_TaskState.Descriptor instead.
func (PipelineTaskDetail_TaskState) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 1}
}

type PipelineTaskDetail_TaskType int32

const (
	// Root task replaces Root Execution, it is the top ancestor task to all tasks in the pipeline run
	PipelineTaskDetail_ROOT    PipelineTaskDetail_TaskType = 0
	PipelineTaskDetail_RUNTIME PipelineTaskDetail_TaskType = 1
	// Condition Branch is the wrapper If block
	PipelineTaskDetail_CONDITION_BRANCH PipelineTaskDetail_TaskType = 2
	// Condition is an individual if branch (this feels counter intuitive but this is how it's named in the SDK IR)
	// and we are consistent with the naming here.
	PipelineTaskDetail_CONDITION PipelineTaskDetail_TaskType = 3
	// Task Group for Condition Branches
	// Task Group for Loop Iterations
	PipelineTaskDetail_LOOP         PipelineTaskDetail_TaskType = 4
	PipelineTaskDetail_EXIT_HANDLER PipelineTaskDetail_TaskType = 5
	// Generic DAG task type for types like Nested Pipelines
	// where there is no declarative way to detect this within
	// a driver.
	PipelineTaskDetail_DAG PipelineTaskDetail_TaskType = 6
)

// Enum value maps for PipelineTaskDetail_TaskType.
var (
	PipelineTaskDetail_TaskType_name = map[int32]string{
		0: "ROOT",
		1: "RUNTIME",
		2: "CONDITION_BRANCH",
		3: "CONDITION",
		4: "LOOP",
		5: "EXIT_HANDLER",
		6: "DAG",
	}
	PipelineTaskDetail_TaskType_value = map[string]int32{
		"ROOT":             0,
		"RUNTIME":          1,
		"CONDITION_BRANCH": 2,
		"CONDITION":        3,
		"LOOP":             4,
		"EXIT_HANDLER":     5,
		"DAG":              6,
	}
)

func (x PipelineTaskDetail_TaskType) Enum() *PipelineTaskDetail_TaskType {
	p := new(PipelineTaskDetail_TaskType)
	*p = x
	return p
}

func (x PipelineTaskDetail_TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineTaskDetail_TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[4].Descriptor()
}

func (PipelineTaskDetail_TaskType) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[4]
}

func (x PipelineTaskDetail_TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineTaskDetail_TaskType.Descriptor instead.
func (PipelineTaskDetail_TaskType) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 2}
}

type Run struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input. ID of the parent experiment.
	// The default experiment ID will be used if this is not specified.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// Output. Unique run ID. Generated by API server.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Required input. Name provided by user,
	// or auto generated if run is created by a recurring run.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output. Specifies whether this run is in archived or available mode.
	StorageState Run_StorageState `protobuf:"varint,4,opt,name=storage_state,json=storageState,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.Run_StorageState" json:"storage_state,omitempty"`
	// Optional input. Short description of the run.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required input. Specifies the source of the pipeline spec for this
	// run. Can be either a pipeline version id, or a pipeline spec.
	//
	// Types that are valid to be assigned to PipelineSource:
	//
	//	*Run_PipelineVersionId
	//	*Run_PipelineSpec
	//	*Run_PipelineVersionReference
	PipelineSource isRun_PipelineSource `protobuf_oneof:"pipeline_source"`
	// Required input. Runtime config of the run.
	RuntimeConfig *RuntimeConfig `protobuf:"bytes,8,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty"`
	// Optional input. Specifies which kubernetes service account is used.
	ServiceAccount string `protobuf:"bytes,9,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Output. Creation time of the run.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. When this run is scheduled to start. This could be different from
	// created_at. For example, if a run is from a backfilling job that was supposed
	// to run 2 month ago, the created_at will be 2 month behind scheduled_at.
	ScheduledAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// Output. Completion of the run.
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Output. Runtime state of a run.
	State RuntimeState `protobuf:"varint,13,opt,name=state,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RuntimeState" json:"state,omitempty"`
	// In case any error happens retrieving a run field, only run ID
	// and the error message is returned. Client has the flexibility of choosing
	// how to handle the error. This is especially useful during listing call.
	Error *status.Status `protobuf:"bytes,14,opt,name=error,proto3" json:"error,omitempty"`
	// Output. Runtime details of a run.
	// Either remove or deprecate this
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	RunDetails *RunDetails `protobuf:"bytes,15,opt,name=run_details,json=runDetails,proto3" json:"run_details,omitempty"`
	// ID of the recurring run that triggered this run.
	RecurringRunId string `protobuf:"bytes,16,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	// Output. A sequence of run statuses. This field keeps a record
	// of state transitions.
	StateHistory []*RuntimeStatus `protobuf:"bytes,17,rep,name=state_history,json=stateHistory,proto3" json:"state_history,omitempty"`
	// Output only. Reference to the pipeline used for this run.
	PipelineReference *PipelineVersionReference `protobuf:"bytes,19,opt,name=pipeline_reference,json=pipelineReference,proto3" json:"pipeline_reference,omitempty"`
	Tasks             []*PipelineTaskDetail     `protobuf:"bytes,20,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Run) Reset() {
	*x = Run{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{0}
}

func (x *Run) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *Run) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *Run) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Run) GetStorageState() Run_StorageState {
	if x != nil {
		return x.StorageState
	}
	return Run_STORAGE_STATE_UNSPECIFIED
}

func (x *Run) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Run) GetPipelineSource() isRun_PipelineSource {
	if x != nil {
		return x.PipelineSource
	}
	return nil
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *Run) GetPipelineVersionId() string {
	if x != nil {
		if x, ok := x.PipelineSource.(*Run_PipelineVersionId); ok {
			return x.PipelineVersionId
		}
	}
	return ""
}

func (x *Run) GetPipelineSpec() *structpb.Struct {
	if x != nil {
		if x, ok := x.PipelineSource.(*Run_PipelineSpec); ok {
			return x.PipelineSpec
		}
	}
	return nil
}

func (x *Run) GetPipelineVersionReference() *PipelineVersionReference {
	if x != nil {
		if x, ok := x.PipelineSource.(*Run_PipelineVersionReference); ok {
			return x.PipelineVersionReference
		}
	}
	return nil
}

func (x *Run) GetRuntimeConfig() *RuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (x *Run) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *Run) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Run) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *Run) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Run) GetState() RuntimeState {
	if x != nil {
		return x.State
	}
	return RuntimeState_RUNTIME_STATE_UNSPECIFIED
}

func (x *Run) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *Run) GetRunDetails() *RunDetails {
	if x != nil {
		return x.RunDetails
	}
	return nil
}

func (x *Run) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

func (x *Run) GetStateHistory() []*RuntimeStatus {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

func (x *Run) GetPipelineReference() *PipelineVersionReference {
	if x != nil {
		return x.PipelineReference
	}
	return nil
}

func (x *Run) GetTasks() []*PipelineTaskDetail {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type isRun_PipelineSource interface {
	isRun_PipelineSource()
}

type Run_PipelineVersionId struct {
	// This field is Deprecated. The pipeline version id is under pipeline_version_reference for v2.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	PipelineVersionId string `protobuf:"bytes,6,opt,name=pipeline_version_id,json=pipelineVersionId,proto3,oneof"`
}

type Run_PipelineSpec struct {
	// Pipeline spec.
	PipelineSpec *structpb.Struct `protobuf:"bytes,7,opt,name=pipeline_spec,json=pipelineSpec,proto3,oneof"`
}

type Run_PipelineVersionReference struct {
	// Reference to a pipeline containing pipeline_id and optionally the pipeline_version_id.
	PipelineVersionReference *PipelineVersionReference `protobuf:"bytes,18,opt,name=pipeline_version_reference,json=pipelineVersionReference,proto3,oneof"`
}

func (*Run_PipelineVersionId) isRun_PipelineSource() {}

func (*Run_PipelineSpec) isRun_PipelineSource() {}

func (*Run_PipelineVersionReference) isRun_PipelineSource() {}

// Reference to an existing pipeline version.
type PipelineVersionReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input. Required. Unique ID of the parent pipeline.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// Input. Optional. Unique ID of an existing pipeline version. If unset, the latest pipeline version is used.
	PipelineVersionId string `protobuf:"bytes,2,opt,name=pipeline_version_id,json=pipelineVersionId,proto3" json:"pipeline_version_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PipelineVersionReference) Reset() {
	*x = PipelineVersionReference{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineVersionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineVersionReference) ProtoMessage() {}

func (x *PipelineVersionReference) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineVersionReference.ProtoReflect.Descriptor instead.
func (*PipelineVersionReference) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineVersionReference) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineVersionReference) GetPipelineVersionId() string {
	if x != nil {
		return x.PipelineVersionId
	}
	return ""
}

// Timestamped representation of a runtime state with an optional error.
type RuntimeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Update time of this state.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The state of a runtime instance.
	State RuntimeState `protobuf:"varint,2,opt,name=state,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RuntimeState" json:"state,omitempty"`
	// The error that occurred during the state. May be set when the state is
	// any of the non-final states (PENDING/RUNNING/CANCELING) or FAILED state.
	// If the state is FAILED, the error here is final and not going to be
	// retried. If the state is a non-final state, the error indicates that a
	// system-error being retried.
	Error         *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeStatus) Reset() {
	*x = RuntimeStatus{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeStatus) ProtoMessage() {}

func (x *RuntimeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeStatus.ProtoReflect.Descriptor instead.
func (*RuntimeStatus) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{2}
}

func (x *RuntimeStatus) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RuntimeStatus) GetState() RuntimeState {
	if x != nil {
		return x.State
	}
	return RuntimeState_RUNTIME_STATE_UNSPECIFIED
}

func (x *RuntimeStatus) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Runtime details of a run.
type RunDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipeline context ID of a run.
	PipelineContextId int64 `protobuf:"varint,1,opt,name=pipeline_context_id,json=pipelineContextId,proto3" json:"pipeline_context_id,omitempty"`
	// Pipeline run context ID of a run.
	PipelineRunContextId int64 `protobuf:"varint,2,opt,name=pipeline_run_context_id,json=pipelineRunContextId,proto3" json:"pipeline_run_context_id,omitempty"`
	// Runtime details of the tasks that belong to the run.
	TaskDetails   []*PipelineTaskDetail `protobuf:"bytes,3,rep,name=task_details,json=taskDetails,proto3" json:"task_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunDetails) Reset() {
	*x = RunDetails{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDetails) ProtoMessage() {}

func (x *RunDetails) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDetails.ProtoReflect.Descriptor instead.
func (*RunDetails) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{3}
}

func (x *RunDetails) GetPipelineContextId() int64 {
	if x != nil {
		return x.PipelineContextId
	}
	return 0
}

func (x *RunDetails) GetPipelineRunContextId() int64 {
	if x != nil {
		return x.PipelineRunContextId
	}
	return 0
}

func (x *RunDetails) GetTaskDetails() []*PipelineTaskDetail {
	if x != nil {
		return x.TaskDetails
	}
	return nil
}

// Runtime information of a task execution.
type PipelineTaskDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// User specified name of a task that is defined in
	// [Pipeline.spec][].
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// System-generated ID of a task.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// ID of the parent run.
	RunId            string                        `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Pods             []*PipelineTaskDetail_TaskPod `protobuf:"bytes,5,rep,name=pods,proto3" json:"pods,omitempty"`
	CacheFingerprint string                        `protobuf:"bytes,6,opt,name=cache_fingerprint,json=cacheFingerprint,proto3" json:"cache_fingerprint,omitempty"`
	// Creation time of a task.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Starting time of a task.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Completion time of a task.
	EndTime        *timestamppb.Timestamp             `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status         PipelineTaskDetail_TaskState       `protobuf:"varint,10,opt,name=status,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail_TaskState" json:"status,omitempty"`
	StatusMetadata *PipelineTaskDetail_StatusMetadata `protobuf:"bytes,11,opt,name=status_metadata,json=statusMetadata,proto3" json:"status_metadata,omitempty"`
	// A sequence of task statuses. This field keeps a record
	// of state transitions.
	StateHistory   []*RuntimeStatus                   `protobuf:"bytes,12,rep,name=state_history,json=stateHistory,proto3" json:"state_history,omitempty"`
	Type           PipelineTaskDetail_TaskType        `protobuf:"varint,13,opt,name=type,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail_TaskType" json:"type,omitempty"`
	TypeAttributes *PipelineTaskDetail_TypeAttributes `protobuf:"bytes,14,opt,name=type_attributes,json=typeAttributes,proto3" json:"type_attributes,omitempty"`
	// The error that occurred during task execution.
	// Only populated when the task is in FAILED or CANCELED state.
	Error *status.Status `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
	// ID of the parent task if the task is within a component scope.
	// Empty if the task is at the root level.
	ParentTaskId *string `protobuf:"bytes,16,opt,name=parent_task_id,json=parentTaskId,proto3,oneof" json:"parent_task_id,omitempty"`
	// Sequence of dependent tasks.
	ChildTasks    []*PipelineTaskDetail_ChildTask  `protobuf:"bytes,17,rep,name=child_tasks,json=childTasks,proto3" json:"child_tasks,omitempty"`
	Inputs        *PipelineTaskDetail_InputOutputs `protobuf:"bytes,18,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       *PipelineTaskDetail_InputOutputs `protobuf:"bytes,19,opt,name=outputs,proto3" json:"outputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail) Reset() {
	*x = PipelineTaskDetail{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail) ProtoMessage() {}

func (x *PipelineTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineTaskDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineTaskDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PipelineTaskDetail) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PipelineTaskDetail) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *PipelineTaskDetail) GetPods() []*PipelineTaskDetail_TaskPod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *PipelineTaskDetail) GetCacheFingerprint() string {
	if x != nil {
		return x.CacheFingerprint
	}
	return ""
}

func (x *PipelineTaskDetail) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PipelineTaskDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PipelineTaskDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PipelineTaskDetail) GetStatus() PipelineTaskDetail_TaskState {
	if x != nil {
		return x.Status
	}
	return PipelineTaskDetail_RUNTIME_STATE_UNSPECIFIED
}

func (x *PipelineTaskDetail) GetStatusMetadata() *PipelineTaskDetail_StatusMetadata {
	if x != nil {
		return x.StatusMetadata
	}
	return nil
}

func (x *PipelineTaskDetail) GetStateHistory() []*RuntimeStatus {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

func (x *PipelineTaskDetail) GetType() PipelineTaskDetail_TaskType {
	if x != nil {
		return x.Type
	}
	return PipelineTaskDetail_ROOT
}

func (x *PipelineTaskDetail) GetTypeAttributes() *PipelineTaskDetail_TypeAttributes {
	if x != nil {
		return x.TypeAttributes
	}
	return nil
}

func (x *PipelineTaskDetail) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PipelineTaskDetail) GetParentTaskId() string {
	if x != nil && x.ParentTaskId != nil {
		return *x.ParentTaskId
	}
	return ""
}

func (x *PipelineTaskDetail) GetChildTasks() []*PipelineTaskDetail_ChildTask {
	if x != nil {
		return x.ChildTasks
	}
	return nil
}

func (x *PipelineTaskDetail) GetInputs() *PipelineTaskDetail_InputOutputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PipelineTaskDetail) GetOutputs() *PipelineTaskDetail_InputOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Runtime information of a pipeline task executor.
type PipelineTaskExecutorDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the job for the main container execution.
	MainJob string `protobuf:"bytes,1,opt,name=main_job,json=mainJob,proto3" json:"main_job,omitempty"`
	// The name of the job for the pre-caching-check container
	// execution. This job will be available if the
	// Run.pipeline_spec specifies the `pre_caching_check` hook in
	// the lifecycle events.
	PreCachingCheckJob string `protobuf:"bytes,2,opt,name=pre_caching_check_job,json=preCachingCheckJob,proto3" json:"pre_caching_check_job,omitempty"`
	// The names of the previously failed job for the main container
	// executions. The list includes the all attempts in chronological order.
	FailedMainJobs []string `protobuf:"bytes,3,rep,name=failed_main_jobs,json=failedMainJobs,proto3" json:"failed_main_jobs,omitempty"`
	// The names of the previously failed job for the
	// pre-caching-check container executions. This job will be available if the
	// Run.pipeline_spec specifies the `pre_caching_check` hook in
	// the lifecycle events.
	// The list includes the all attempts in chronological order.
	FailedPreCachingCheckJobs []string `protobuf:"bytes,4,rep,name=failed_pre_caching_check_jobs,json=failedPreCachingCheckJobs,proto3" json:"failed_pre_caching_check_jobs,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PipelineTaskExecutorDetail) Reset() {
	*x = PipelineTaskExecutorDetail{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskExecutorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskExecutorDetail) ProtoMessage() {}

func (x *PipelineTaskExecutorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskExecutorDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskExecutorDetail) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineTaskExecutorDetail) GetMainJob() string {
	if x != nil {
		return x.MainJob
	}
	return ""
}

func (x *PipelineTaskExecutorDetail) GetPreCachingCheckJob() string {
	if x != nil {
		return x.PreCachingCheckJob
	}
	return ""
}

func (x *PipelineTaskExecutorDetail) GetFailedMainJobs() []string {
	if x != nil {
		return x.FailedMainJobs
	}
	return nil
}

func (x *PipelineTaskExecutorDetail) GetFailedPreCachingCheckJobs() []string {
	if x != nil {
		return x.FailedPreCachingCheckJobs
	}
	return nil
}

// A list of artifact metadata.
type ArtifactList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of artifact metadata ids.
	ArtifactIds   []int64 `protobuf:"varint,1,rep,packed,name=artifact_ids,json=artifactIds,proto3" json:"artifact_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactList) Reset() {
	*x = ArtifactList{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactList) ProtoMessage() {}

func (x *ArtifactList) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactList.ProtoReflect.Descriptor instead.
func (*ArtifactList) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{6}
}

func (x *ArtifactList) GetArtifactIds() []int64 {
	if x != nil {
		return x.ArtifactIds
	}
	return nil
}

type CreateRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// Run to be created.
	Run           *Run `protobuf:"bytes,2,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRunRequest) Reset() {
	*x = CreateRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunRequest) ProtoMessage() {}

func (x *CreateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{7}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *CreateRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *CreateRunRequest) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type GetRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be retrieved.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *GetRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *GetRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ListRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional input field. Filters based on the namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The ID of the parent experiment. If empty, response includes runs across all experiments.
	ExperimentId string `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// A page token to request the next page of results. The token is acquired
	// from the nextPageToken field of the response from the previous
	// ListRuns call or can be omitted when fetching the first page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The number of runs to be listed per page. If there are more runs than this
	// number, the response message will contain a nextPageToken field you can use
	// to fetch the next page.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name desc"
	// (Example, "name asc" or "id desc"). Ascending by default.
	SortBy string `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// A url-encoded, JSON-serialized Filter protocol buffer (see
	// [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
	Filter        string `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{9}
}

func (x *ListRunsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRunsRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *ListRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRunsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListRunsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type TerminateRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be terminated.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateRunRequest) Reset() {
	*x = TerminateRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRunRequest) ProtoMessage() {}

func (x *TerminateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRunRequest.ProtoReflect.Descriptor instead.
func (*TerminateRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *TerminateRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *TerminateRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ListRunsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of retrieved runs.
	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	// The total number of runs for the given query.
	TotalSize int32 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// The token to list the next page of runs.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{11}
}

func (x *ListRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListRunsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ArchiveRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be archived.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRunRequest) Reset() {
	*x = ArchiveRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRunRequest) ProtoMessage() {}

func (x *ArchiveRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRunRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *ArchiveRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *ArchiveRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type UnarchiveRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be restored.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnarchiveRunRequest) Reset() {
	*x = UnarchiveRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnarchiveRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnarchiveRunRequest) ProtoMessage() {}

func (x *UnarchiveRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnarchiveRunRequest.ProtoReflect.Descriptor instead.
func (*UnarchiveRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *UnarchiveRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *UnarchiveRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type DeleteRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be deleted.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRunRequest) Reset() {
	*x = DeleteRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunRequest) ProtoMessage() {}

func (x *DeleteRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{14}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *DeleteRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *DeleteRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ReadArtifactRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// ID of the run.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// ID of the running node.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Name of the artifact.
	ArtifactName  string `protobuf:"bytes,4,opt,name=artifact_name,json=artifactName,proto3" json:"artifact_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadArtifactRequest) Reset() {
	*x = ReadArtifactRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArtifactRequest) ProtoMessage() {}

func (x *ReadArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArtifactRequest.ProtoReflect.Descriptor instead.
func (*ReadArtifactRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{15}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *ReadArtifactRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *ReadArtifactRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ReadArtifactRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ReadArtifactRequest) GetArtifactName() string {
	if x != nil {
		return x.ArtifactName
	}
	return ""
}

type ReadArtifactResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Byte array of the artifact content.
	Data          []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadArtifactResponse) Reset() {
	*x = ReadArtifactResponse{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArtifactResponse) ProtoMessage() {}

func (x *ReadArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArtifactResponse.ProtoReflect.Descriptor instead.
func (*ReadArtifactResponse) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{16}
}

func (x *ReadArtifactResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RetryRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be retried.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryRunRequest) Reset() {
	*x = RetryRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryRunRequest) ProtoMessage() {}

func (x *RetryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryRunRequest.ProtoReflect.Descriptor instead.
func (*RetryRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *RetryRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *RetryRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type CreateTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *PipelineTaskDetail    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTaskRequest) GetTask() *PipelineTaskDetail {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Task          *PipelineTaskDetail    `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateTaskRequest) GetTask() *PipelineTaskDetail {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{20}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ListTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Must specify either parent_id or run_id to filter tasks.
	//
	// Types that are valid to be assigned to ParentFilter:
	//
	//	*ListTasksRequest_ParentId
	//	*ListTasksRequest_RunId
	ParentFilter  isListTasksRequest_ParentFilter `protobuf_oneof:"parent_filter"`
	PageSize      int32                           `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                          `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter        string                          `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy       string                          `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{21}
}

func (x *ListTasksRequest) GetParentFilter() isListTasksRequest_ParentFilter {
	if x != nil {
		return x.ParentFilter
	}
	return nil
}

func (x *ListTasksRequest) GetParentId() string {
	if x != nil {
		if x, ok := x.ParentFilter.(*ListTasksRequest_ParentId); ok {
			return x.ParentId
		}
	}
	return ""
}

func (x *ListTasksRequest) GetRunId() string {
	if x != nil {
		if x, ok := x.ParentFilter.(*ListTasksRequest_RunId); ok {
			return x.RunId
		}
	}
	return ""
}

func (x *ListTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTasksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListTasksRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type isListTasksRequest_ParentFilter interface {
	isListTasksRequest_ParentFilter()
}

type ListTasksRequest_ParentId struct {
	// List all tasks with this parent task.
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3,oneof"`
}

type ListTasksRequest_RunId struct {
	// List all tasks for this run.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3,oneof"`
}

func (*ListTasksRequest_ParentId) isListTasksRequest_ParentFilter() {}

func (*ListTasksRequest_RunId) isListTasksRequest_ParentFilter() {}

type ListTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*PipelineTaskDetail  `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize     int32                  `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{22}
}

func (x *ListTasksResponse) GetTasks() []*PipelineTaskDetail {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ListTasksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTasksResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PipelineTaskDetail_TaskPod struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Name          string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid           string                         `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Type          PipelineTaskDetail_TaskPodType `protobuf:"varint,3,opt,name=type,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail_TaskPodType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail_TaskPod) Reset() {
	*x = PipelineTaskDetail_TaskPod{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_TaskPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_TaskPod) ProtoMessage() {}

func (x *PipelineTaskDetail_TaskPod) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_TaskPod.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_TaskPod) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PipelineTaskDetail_TaskPod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineTaskDetail_TaskPod) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PipelineTaskDetail_TaskPod) GetType() PipelineTaskDetail_TaskPodType {
	if x != nil {
		return x.Type
	}
	return PipelineTaskDetail_DRIVER
}

// Custom status metadata, this can be used to provide
// additional status info for a given task during runtime
type PipelineTaskDetail_StatusMetadata struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	Message          string                     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CustomProperties map[string]*structpb.Value `protobuf:"bytes,2,rep,name=custom_properties,json=customProperties,proto3" json:"custom_properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PipelineTaskDetail_StatusMetadata) Reset() {
	*x = PipelineTaskDetail_StatusMetadata{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_StatusMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_StatusMetadata) ProtoMessage() {}

func (x *PipelineTaskDetail_StatusMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_StatusMetadata.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_StatusMetadata) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 1}
}

func (x *PipelineTaskDetail_StatusMetadata) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PipelineTaskDetail_StatusMetadata) GetCustomProperties() map[string]*structpb.Value {
	if x != nil {
		return x.CustomProperties
	}
	return nil
}

type PipelineTaskDetail_TypeAttributes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Applies to type Runtime that is an iteration
	IterationIndex *int64 `protobuf:"varint,1,opt,name=iteration_index,json=iterationIndex,proto3,oneof" json:"iteration_index,omitempty"`
	// Optional. Applies to type LOOP
	IterationCount *int64 `protobuf:"varint,2,opt,name=iteration_count,json=iterationCount,proto3,oneof" json:"iteration_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PipelineTaskDetail_TypeAttributes) Reset() {
	*x = PipelineTaskDetail_TypeAttributes{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_TypeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_TypeAttributes) ProtoMessage() {}

func (x *PipelineTaskDetail_TypeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_TypeAttributes.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_TypeAttributes) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 2}
}

func (x *PipelineTaskDetail_TypeAttributes) GetIterationIndex() int64 {
	if x != nil && x.IterationIndex != nil {
		return *x.IterationIndex
	}
	return 0
}

func (x *PipelineTaskDetail_TypeAttributes) GetIterationCount() int64 {
	if x != nil && x.IterationCount != nil {
		return *x.IterationCount
	}
	return 0
}

// A dependent task that requires this one to succeed.
// Represented by either task_id or pod_name.
// TODO(HumairAK): Do we need this if we have parent_task_id?
type PipelineTaskDetail_ChildTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// System-generated ID of a task.
	TaskId        string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail_ChildTask) Reset() {
	*x = PipelineTaskDetail_ChildTask{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_ChildTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_ChildTask) ProtoMessage() {}

func (x *PipelineTaskDetail_ChildTask) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_ChildTask.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_ChildTask) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 3}
}

func (x *PipelineTaskDetail_ChildTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PipelineTaskDetail_ChildTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PipelineTaskDetail_InputOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For Loops parameters are filled with resolved
	// parameterIterator.items
	Parameters []*PipelineTaskDetail_InputOutputs_IOParameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// Output Only. To create Artifacts for a task are created
	// via ArtifactTasks.
	Artifacts     []*PipelineTaskDetail_InputOutputs_IOArtifact `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail_InputOutputs) Reset() {
	*x = PipelineTaskDetail_InputOutputs{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_InputOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_InputOutputs) ProtoMessage() {}

func (x *PipelineTaskDetail_InputOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_InputOutputs.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_InputOutputs) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 4}
}

func (x *PipelineTaskDetail_InputOutputs) GetParameters() []*PipelineTaskDetail_InputOutputs_IOParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PipelineTaskDetail_InputOutputs) GetArtifacts() []*PipelineTaskDetail_InputOutputs_IOArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type PipelineTaskDetail_InputOutputs_IOParameter struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Value        *structpb.Value        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type         IOType                 `protobuf:"varint,2,opt,name=type,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.IOType" json:"type,omitempty"`
	ParameterKey string                 `protobuf:"bytes,3,opt,name=parameter_key,json=parameterKey,proto3" json:"parameter_key,omitempty"`
	// This field is optional because in the case of
	// Input RuntimeValues and Raw Iterator Inputs
	// there are no producer
	Producer      *IOProducer `protobuf:"bytes,4,opt,name=producer,proto3,oneof" json:"producer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) Reset() {
	*x = PipelineTaskDetail_InputOutputs_IOParameter{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_InputOutputs_IOParameter) ProtoMessage() {}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_InputOutputs_IOParameter.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_InputOutputs_IOParameter) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 4, 0}
}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) GetType() IOType {
	if x != nil {
		return x.Type
	}
	return IOType_UNSPECIFIED
}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) GetParameterKey() string {
	if x != nil {
		return x.ParameterKey
	}
	return ""
}

func (x *PipelineTaskDetail_InputOutputs_IOParameter) GetProducer() *IOProducer {
	if x != nil {
		return x.Producer
	}
	return nil
}

// Align structure with Executor Input
type PipelineTaskDetail_InputOutputs_IOArtifact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Artifacts     []*Artifact            `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	Type          IOType                 `protobuf:"varint,2,opt,name=type,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.IOType" json:"type,omitempty"`
	ArtifactKey   string                 `protobuf:"bytes,3,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Producer      *IOProducer            `protobuf:"bytes,4,opt,name=producer,proto3" json:"producer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) Reset() {
	*x = PipelineTaskDetail_InputOutputs_IOArtifact{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_InputOutputs_IOArtifact) ProtoMessage() {}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_InputOutputs_IOArtifact.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_InputOutputs_IOArtifact) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 4, 1}
}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) GetType() IOType {
	if x != nil {
		return x.Type
	}
	return IOType_UNSPECIFIED
}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) GetArtifactKey() string {
	if x != nil {
		return x.ArtifactKey
	}
	return ""
}

func (x *PipelineTaskDetail_InputOutputs_IOArtifact) GetProducer() *IOProducer {
	if x != nil {
		return x.Producer
	}
	return nil
}

var File_backend_api_v2beta1_run_proto protoreflect.FileDescriptor

const file_backend_api_v2beta1_run_proto_rawDesc = "" +
	"\n" +
	"\x1dbackend/api/v2beta1/run.proto\x12&kubeflow.pipelines.backend.api.v2beta1\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x17google/rpc/status.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a(backend/api/v2beta1/runtime_config.proto\x1a\"backend/api/v2beta1/artifact.proto\"\x93\v\n" +
	"\x03Run\x12#\n" +
	"\rexperiment_id\x18\x01 \x01(\tR\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12]\n" +
	"\rstorage_state\x18\x04 \x01(\x0e28.kubeflow.pipelines.backend.api.v2beta1.Run.StorageStateR\fstorageState\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x124\n" +
	"\x13pipeline_version_id\x18\x06 \x01(\tB\x02\x18\x01H\x00R\x11pipelineVersionId\x12>\n" +
	"\rpipeline_spec\x18\a \x01(\v2\x17.google.protobuf.StructH\x00R\fpipelineSpec\x12\x80\x01\n" +
	"\x1apipeline_version_reference\x18\x12 \x01(\v2@.kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReferenceH\x00R\x18pipelineVersionReference\x12\\\n" +
	"\x0eruntime_config\x18\b \x01(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeConfigR\rruntimeConfig\x12'\n" +
	"\x0fservice_account\x18\t \x01(\tR\x0eserviceAccount\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12=\n" +
	"\fscheduled_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\vscheduledAt\x12;\n" +
	"\vfinished_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"finishedAt\x12J\n" +
	"\x05state\x18\r \x01(\x0e24.kubeflow.pipelines.backend.api.v2beta1.RuntimeStateR\x05state\x12(\n" +
	"\x05error\x18\x0e \x01(\v2\x12.google.rpc.StatusR\x05error\x12W\n" +
	"\vrun_details\x18\x0f \x01(\v22.kubeflow.pipelines.backend.api.v2beta1.RunDetailsB\x02\x18\x01R\n" +
	"runDetails\x12(\n" +
	"\x10recurring_run_id\x18\x10 \x01(\tR\x0erecurringRunId\x12Z\n" +
	"\rstate_history\x18\x11 \x03(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeStatusR\fstateHistory\x12o\n" +
	"\x12pipeline_reference\x18\x13 \x01(\v2@.kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReferenceR\x11pipelineReference\x12P\n" +
	"\x05tasks\x18\x14 \x03(\v2:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetailR\x05tasks\"J\n" +
	"\fStorageState\x12\x1d\n" +
	"\x19STORAGE_STATE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tAVAILABLE\x10\x01\x12\f\n" +
	"\bARCHIVED\x10\x02B\x11\n" +
	"\x0fpipeline_source\"k\n" +
	"\x18PipelineVersionReference\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12.\n" +
	"\x13pipeline_version_id\x18\x02 \x01(\tR\x11pipelineVersionId\"\xc2\x01\n" +
	"\rRuntimeStatus\x12;\n" +
	"\vupdate_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12J\n" +
	"\x05state\x18\x02 \x01(\x0e24.kubeflow.pipelines.backend.api.v2beta1.RuntimeStateR\x05state\x12(\n" +
	"\x05error\x18\x03 \x01(\v2\x12.google.rpc.StatusR\x05error\"\xd2\x01\n" +
	"\n" +
	"RunDetails\x12.\n" +
	"\x13pipeline_context_id\x18\x01 \x01(\x03R\x11pipelineContextId\x125\n" +
	"\x17pipeline_run_context_id\x18\x02 \x01(\x03R\x14pipelineRunContextId\x12]\n" +
	"\ftask_details\x18\x03 \x03(\v2:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetailR\vtaskDetails\"\xcf\x17\n" +
	"\x12PipelineTaskDetail\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\x12\x15\n" +
	"\x06run_id\x18\x04 \x01(\tR\x05runId\x12V\n" +
	"\x04pods\x18\x05 \x03(\v2B.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPodR\x04pods\x12+\n" +
	"\x11cache_fingerprint\x18\x06 \x01(\tR\x10cacheFingerprint\x12;\n" +
	"\vcreate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x129\n" +
	"\n" +
	"start_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\\\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2D.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskStateR\x06status\x12r\n" +
	"\x0fstatus_metadata\x18\v \x01(\v2I.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadataR\x0estatusMetadata\x12Z\n" +
	"\rstate_history\x18\f \x03(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeStatusR\fstateHistory\x12W\n" +
	"\x04type\x18\r \x01(\x0e2C.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskTypeR\x04type\x12r\n" +
	"\x0ftype_attributes\x18\x0e \x01(\v2I.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TypeAttributesR\x0etypeAttributes\x12(\n" +
	"\x05error\x18\x0f \x01(\v2\x12.google.rpc.StatusR\x05error\x12)\n" +
	"\x0eparent_task_id\x18\x10 \x01(\tH\x00R\fparentTaskId\x88\x01\x01\x12e\n" +
	"\vchild_tasks\x18\x11 \x03(\v2D.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.ChildTaskR\n" +
	"childTasks\x12_\n" +
	"\x06inputs\x18\x12 \x01(\v2G.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputsR\x06inputs\x12a\n" +
	"\aoutputs\x18\x13 \x01(\v2G.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputsR\aoutputs\x1a\x8b\x01\n" +
	"\aTaskPod\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12Z\n" +
	"\x04type\x18\x03 \x01(\x0e2F.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPodTypeR\x04type\x1a\x96\x02\n" +
	"\x0eStatusMetadata\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x8c\x01\n" +
	"\x11custom_properties\x18\x02 \x03(\v2_.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata.CustomPropertiesEntryR\x10customProperties\x1a[\n" +
	"\x15CustomPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\x1a\x94\x01\n" +
	"\x0eTypeAttributes\x12,\n" +
	"\x0fiteration_index\x18\x01 \x01(\x03H\x00R\x0eiterationIndex\x88\x01\x01\x12,\n" +
	"\x0fiteration_count\x18\x02 \x01(\x03H\x01R\x0eiterationCount\x88\x01\x01B\x12\n" +
	"\x10_iteration_indexB\x12\n" +
	"\x10_iteration_count\x1a8\n" +
	"\tChildTask\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x1a\x94\x06\n" +
	"\fInputOutputs\x12s\n" +
	"\n" +
	"parameters\x18\x01 \x03(\v2S.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOParameterR\n" +
	"parameters\x12p\n" +
	"\tartifacts\x18\x02 \x03(\v2R.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOArtifactR\tartifacts\x1a\x86\x02\n" +
	"\vIOParameter\x12,\n" +
	"\x05value\x18\x01 \x01(\v2\x16.google.protobuf.ValueR\x05value\x12B\n" +
	"\x04type\x18\x02 \x01(\x0e2..kubeflow.pipelines.backend.api.v2beta1.IOTypeR\x04type\x12#\n" +
	"\rparameter_key\x18\x03 \x01(\tR\fparameterKey\x12S\n" +
	"\bproducer\x18\x04 \x01(\v22.kubeflow.pipelines.backend.api.v2beta1.IOProducerH\x00R\bproducer\x88\x01\x01B\v\n" +
	"\t_producer\x1a\x93\x02\n" +
	"\n" +
	"IOArtifact\x12N\n" +
	"\tartifacts\x18\x01 \x03(\v20.kubeflow.pipelines.backend.api.v2beta1.ArtifactR\tartifacts\x12B\n" +
	"\x04type\x18\x02 \x01(\x0e2..kubeflow.pipelines.backend.api.v2beta1.IOTypeR\x04type\x12!\n" +
	"\fartifact_key\x18\x03 \x01(\tR\vartifactKey\x12N\n" +
	"\bproducer\x18\x04 \x01(\v22.kubeflow.pipelines.backend.api.v2beta1.IOProducerR\bproducer\"'\n" +
	"\vTaskPodType\x12\n" +
	"\n" +
	"\x06DRIVER\x10\x00\x12\f\n" +
	"\bEXECUTOR\x10\x01\"k\n" +
	"\tTaskState\x12\x1d\n" +
	"\x19RUNTIME_STATE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\r\n" +
	"\tSUCCEEDED\x10\x02\x12\v\n" +
	"\aSKIPPED\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x04\x12\n" +
	"\n" +
	"\x06CACHED\x10\x05\"k\n" +
	"\bTaskType\x12\b\n" +
	"\x04ROOT\x10\x00\x12\v\n" +
	"\aRUNTIME\x10\x01\x12\x14\n" +
	"\x10CONDITION_BRANCH\x10\x02\x12\r\n" +
	"\tCONDITION\x10\x03\x12\b\n" +
	"\x04LOOP\x10\x04\x12\x10\n" +
	"\fEXIT_HANDLER\x10\x05\x12\a\n" +
	"\x03DAG\x10\x06B\x11\n" +
	"\x0f_parent_task_id\"\xd6\x01\n" +
	"\x1aPipelineTaskExecutorDetail\x12\x19\n" +
	"\bmain_job\x18\x01 \x01(\tR\amainJob\x121\n" +
	"\x15pre_caching_check_job\x18\x02 \x01(\tR\x12preCachingCheckJob\x12(\n" +
	"\x10failed_main_jobs\x18\x03 \x03(\tR\x0efailedMainJobs\x12@\n" +
	"\x1dfailed_pre_caching_check_jobs\x18\x04 \x03(\tR\x19failedPreCachingCheckJobs\"1\n" +
	"\fArtifactList\x12!\n" +
	"\fartifact_ids\x18\x01 \x03(\x03R\vartifactIds\"z\n" +
	"\x10CreateRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12=\n" +
	"\x03run\x18\x02 \x01(\v2+.kubeflow.pipelines.backend.api.v2beta1.RunR\x03run\"O\n" +
	"\rGetRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\xc1\x01\n" +
	"\x0fListRunsRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12#\n" +
	"\rexperiment_id\x18\x02 \x01(\tR\fexperimentId\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x17\n" +
	"\asort_by\x18\x05 \x01(\tR\x06sortBy\x12\x16\n" +
	"\x06filter\x18\x06 \x01(\tR\x06filter\"U\n" +
	"\x13TerminateRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\x9a\x01\n" +
	"\x10ListRunsResponse\x12?\n" +
	"\x04runs\x18\x01 \x03(\v2+.kubeflow.pipelines.backend.api.v2beta1.RunR\x04runs\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x05R\ttotalSize\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\"S\n" +
	"\x11ArchiveRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"U\n" +
	"\x13UnarchiveRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"R\n" +
	"\x10DeleteRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\x93\x01\n" +
	"\x13ReadArtifactRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12#\n" +
	"\rartifact_name\x18\x04 \x01(\tR\fartifactName\"*\n" +
	"\x14ReadArtifactResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"Q\n" +
	"\x0fRetryRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"c\n" +
	"\x11CreateTaskRequest\x12N\n" +
	"\x04task\x18\x01 \x01(\v2:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetailR\x04task\"|\n" +
	"\x11UpdateTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12N\n" +
	"\x04task\x18\x02 \x01(\v2:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetailR\x04task\")\n" +
	"\x0eGetTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"\xca\x01\n" +
	"\x10ListTasksRequest\x12\x1d\n" +
	"\tparent_id\x18\x01 \x01(\tH\x00R\bparentId\x12\x17\n" +
	"\x06run_id\x18\x02 \x01(\tH\x00R\x05runId\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\x12\x16\n" +
	"\x06filter\x18\x05 \x01(\tR\x06filter\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderByB\x0f\n" +
	"\rparent_filter\"\xac\x01\n" +
	"\x11ListTasksResponse\x12P\n" +
	"\x05tasks\x18\x01 \x03(\v2:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetailR\x05tasks\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize*\x98\x01\n" +
	"\fRuntimeState\x12\x1d\n" +
	"\x19RUNTIME_STATE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\r\n" +
	"\tSUCCEEDED\x10\x03\x12\v\n" +
	"\aSKIPPED\x10\x04\x12\n" +
	"\n" +
	"\x06FAILED\x10\x05\x12\r\n" +
	"\tCANCELING\x10\x06\x12\f\n" +
	"\bCANCELED\x10\a\x12\n" +
	"\n" +
	"\x06PAUSED\x10\b2\xfb\x11\n" +
	"\n" +
	"RunService\x12\x93\x01\n" +
	"\tCreateRun\x128.kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest\x1a+.kubeflow.pipelines.backend.api.v2beta1.Run\"\x1f\x82\xd3\xe4\x93\x02\x19:\x03run\"\x12/apis/v2beta1/runs\x12\x91\x01\n" +
	"\x06GetRun\x125.kubeflow.pipelines.backend.api.v2beta1.GetRunRequest\x1a+.kubeflow.pipelines.backend.api.v2beta1.Run\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/apis/v2beta1/runs/{run_id}\x12\x99\x01\n" +
	"\bListRuns\x127.kubeflow.pipelines.backend.api.v2beta1.ListRunsRequest\x1a8.kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/apis/v2beta1/runs\x12\x8c\x01\n" +
	"\n" +
	"ArchiveRun\x129.kubeflow.pipelines.backend.api.v2beta1.ArchiveRunRequest\x1a\x16.google.protobuf.Empty\"+\x82\xd3\xe4\x93\x02%\"#/apis/v2beta1/runs/{run_id}:archive\x12\x92\x01\n" +
	"\fUnarchiveRun\x12;.kubeflow.pipelines.backend.api.v2beta1.UnarchiveRunRequest\x1a\x16.google.protobuf.Empty\"-\x82\xd3\xe4\x93\x02'\"%/apis/v2beta1/runs/{run_id}:unarchive\x12\x82\x01\n" +
	"\tDeleteRun\x128.kubeflow.pipelines.backend.api.v2beta1.DeleteRunRequest\x1a\x16.google.protobuf.Empty\"#\x82\xd3\xe4\x93\x02\x1d*\x1b/apis/v2beta1/runs/{run_id}\x12\xdd\x01\n" +
	"\fReadArtifact\x12;.kubeflow.pipelines.backend.api.v2beta1.ReadArtifactRequest\x1a<.kubeflow.pipelines.backend.api.v2beta1.ReadArtifactResponse\"R\x82\xd3\xe4\x93\x02L\x12J/apis/v2beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read\x12\x92\x01\n" +
	"\fTerminateRun\x12;.kubeflow.pipelines.backend.api.v2beta1.TerminateRunRequest\x1a\x16.google.protobuf.Empty\"-\x82\xd3\xe4\x93\x02'\"%/apis/v2beta1/runs/{run_id}:terminate\x12\x86\x01\n" +
	"\bRetryRun\x127.kubeflow.pipelines.backend.api.v2beta1.RetryRunRequest\x1a\x16.google.protobuf.Empty\")\x82\xd3\xe4\x93\x02#\"!/apis/v2beta1/runs/{run_id}:retry\x12\xd7\x01\n" +
	"\n" +
	"CreateTask\x129.kubeflow.pipelines.backend.api.v2beta1.CreateTaskRequest\x1a:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail\"R\x92A.\n" +
	"\n" +
	"RunService\x12\x13Creates a new task.*\vcreate_task\x82\xd3\xe4\x93\x02\x1b:\x04task\"\x13/apis/v2beta1/tasks\x12\xe7\x01\n" +
	"\n" +
	"UpdateTask\x129.kubeflow.pipelines.backend.api.v2beta1.UpdateTaskRequest\x1a:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail\"b\x92A4\n" +
	"\n" +
	"RunService\x12\x19Updates an existing task.*\vupdate_task\x82\xd3\xe4\x93\x02%:\x04task2\x1d/apis/v2beta1/tasks/{task_id}\x12\xda\x01\n" +
	"\aGetTask\x126.kubeflow.pipelines.backend.api.v2beta1.GetTaskRequest\x1a:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail\"[\x92A3\n" +
	"\n" +
	"RunService\x12\x1bGets a specific task by ID.*\bget_task\x82\xd3\xe4\x93\x02\x1f\x12\x1d/apis/v2beta1/tasks/{task_id}\x12\xde\x01\n" +
	"\tListTasks\x128.kubeflow.pipelines.backend.api.v2beta1.ListTasksRequest\x1a9.kubeflow.pipelines.backend.api.v2beta1.ListTasksResponse\"\\\x92A>\n" +
	"\n" +
	"RunService\x12$Lists tasks with optional filtering.*\n" +
	"list_tasks\x82\xd3\xe4\x93\x02\x15\x12\x13/apis/v2beta1/tasksB\x98\x01\x92AX*\x02\x01\x02R#\n" +
	"\adefault\x12\x18\x12\x16\n" +
	"\x14\x1a\x12.google.rpc.StatusZ\x1f\n" +
	"\x1d\n" +
	"\x06Bearer\x12\x13\b\x02\x1a\rauthorization \x02b\f\n" +
	"\n" +
	"\n" +
	"\x06Bearer\x12\x00Z;github.com/kubeflow/pipelines/backend/api/v2beta1/go_clientb\x06proto3"

var (
	file_backend_api_v2beta1_run_proto_rawDescOnce sync.Once
	file_backend_api_v2beta1_run_proto_rawDescData []byte
)

func file_backend_api_v2beta1_run_proto_rawDescGZIP() []byte {
	file_backend_api_v2beta1_run_proto_rawDescOnce.Do(func() {
		file_backend_api_v2beta1_run_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_api_v2beta1_run_proto_rawDesc), len(file_backend_api_v2beta1_run_proto_rawDesc)))
	})
	return file_backend_api_v2beta1_run_proto_rawDescData
}

var file_backend_api_v2beta1_run_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_backend_api_v2beta1_run_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_backend_api_v2beta1_run_proto_goTypes = []any{
	(RuntimeState)(0),                                   // 0: kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	(Run_StorageState)(0),                               // 1: kubeflow.pipelines.backend.api.v2beta1.Run.StorageState
	(PipelineTaskDetail_TaskPodType)(0),                 // 2: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPodType
	(PipelineTaskDetail_TaskState)(0),                   // 3: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskState
	(PipelineTaskDetail_TaskType)(0),                    // 4: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskType
	(*Run)(nil),                                         // 5: kubeflow.pipelines.backend.api.v2beta1.Run
	(*PipelineVersionReference)(nil),                    // 6: kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	(*RuntimeStatus)(nil),                               // 7: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus
	(*RunDetails)(nil),                                  // 8: kubeflow.pipelines.backend.api.v2beta1.RunDetails
	(*PipelineTaskDetail)(nil),                          // 9: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	(*PipelineTaskExecutorDetail)(nil),                  // 10: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskExecutorDetail
	(*ArtifactList)(nil),                                // 11: kubeflow.pipelines.backend.api.v2beta1.ArtifactList
	(*CreateRunRequest)(nil),                            // 12: kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest
	(*GetRunRequest)(nil),                               // 13: kubeflow.pipelines.backend.api.v2beta1.GetRunRequest
	(*ListRunsRequest)(nil),                             // 14: kubeflow.pipelines.backend.api.v2beta1.ListRunsRequest
	(*TerminateRunRequest)(nil),                         // 15: kubeflow.pipelines.backend.api.v2beta1.TerminateRunRequest
	(*ListRunsResponse)(nil),                            // 16: kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse
	(*ArchiveRunRequest)(nil),                           // 17: kubeflow.pipelines.backend.api.v2beta1.ArchiveRunRequest
	(*UnarchiveRunRequest)(nil),                         // 18: kubeflow.pipelines.backend.api.v2beta1.UnarchiveRunRequest
	(*DeleteRunRequest)(nil),                            // 19: kubeflow.pipelines.backend.api.v2beta1.DeleteRunRequest
	(*ReadArtifactRequest)(nil),                         // 20: kubeflow.pipelines.backend.api.v2beta1.ReadArtifactRequest
	(*ReadArtifactResponse)(nil),                        // 21: kubeflow.pipelines.backend.api.v2beta1.ReadArtifactResponse
	(*RetryRunRequest)(nil),                             // 22: kubeflow.pipelines.backend.api.v2beta1.RetryRunRequest
	(*CreateTaskRequest)(nil),                           // 23: kubeflow.pipelines.backend.api.v2beta1.CreateTaskRequest
	(*UpdateTaskRequest)(nil),                           // 24: kubeflow.pipelines.backend.api.v2beta1.UpdateTaskRequest
	(*GetTaskRequest)(nil),                              // 25: kubeflow.pipelines.backend.api.v2beta1.GetTaskRequest
	(*ListTasksRequest)(nil),                            // 26: kubeflow.pipelines.backend.api.v2beta1.ListTasksRequest
	(*ListTasksResponse)(nil),                           // 27: kubeflow.pipelines.backend.api.v2beta1.ListTasksResponse
	(*PipelineTaskDetail_TaskPod)(nil),                  // 28: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPod
	(*PipelineTaskDetail_StatusMetadata)(nil),           // 29: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata
	(*PipelineTaskDetail_TypeAttributes)(nil),           // 30: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TypeAttributes
	(*PipelineTaskDetail_ChildTask)(nil),                // 31: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.ChildTask
	(*PipelineTaskDetail_InputOutputs)(nil),             // 32: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs
	nil,                                                 // 33: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata.CustomPropertiesEntry
	(*PipelineTaskDetail_InputOutputs_IOParameter)(nil), // 34: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOParameter
	(*PipelineTaskDetail_InputOutputs_IOArtifact)(nil),  // 35: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOArtifact
	(*structpb.Struct)(nil),                             // 36: google.protobuf.Struct
	(*RuntimeConfig)(nil),                               // 37: kubeflow.pipelines.backend.api.v2beta1.RuntimeConfig
	(*timestamppb.Timestamp)(nil),                       // 38: google.protobuf.Timestamp
	(*status.Status)(nil),                               // 39: google.rpc.Status
	(*structpb.Value)(nil),                              // 40: google.protobuf.Value
	(IOType)(0),                                         // 41: kubeflow.pipelines.backend.api.v2beta1.IOType
	(*IOProducer)(nil),                                  // 42: kubeflow.pipelines.backend.api.v2beta1.IOProducer
	(*Artifact)(nil),                                    // 43: kubeflow.pipelines.backend.api.v2beta1.Artifact
	(*emptypb.Empty)(nil),                               // 44: google.protobuf.Empty
}
var file_backend_api_v2beta1_run_proto_depIdxs = []int32{
	1,  // 0: kubeflow.pipelines.backend.api.v2beta1.Run.storage_state:type_name -> kubeflow.pipelines.backend.api.v2beta1.Run.StorageState
	36, // 1: kubeflow.pipelines.backend.api.v2beta1.Run.pipeline_spec:type_name -> google.protobuf.Struct
	6,  // 2: kubeflow.pipelines.backend.api.v2beta1.Run.pipeline_version_reference:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	37, // 3: kubeflow.pipelines.backend.api.v2beta1.Run.runtime_config:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeConfig
	38, // 4: kubeflow.pipelines.backend.api.v2beta1.Run.created_at:type_name -> google.protobuf.Timestamp
	38, // 5: kubeflow.pipelines.backend.api.v2beta1.Run.scheduled_at:type_name -> google.protobuf.Timestamp
	38, // 6: kubeflow.pipelines.backend.api.v2beta1.Run.finished_at:type_name -> google.protobuf.Timestamp
	0,  // 7: kubeflow.pipelines.backend.api.v2beta1.Run.state:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	39, // 8: kubeflow.pipelines.backend.api.v2beta1.Run.error:type_name -> google.rpc.Status
	8,  // 9: kubeflow.pipelines.backend.api.v2beta1.Run.run_details:type_name -> kubeflow.pipelines.backend.api.v2beta1.RunDetails
	7,  // 10: kubeflow.pipelines.backend.api.v2beta1.Run.state_history:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus
	6,  // 11: kubeflow.pipelines.backend.api.v2beta1.Run.pipeline_reference:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	9,  // 12: kubeflow.pipelines.backend.api.v2beta1.Run.tasks:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	38, // 13: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus.update_time:type_name -> google.protobuf.Timestamp
	0,  // 14: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus.state:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	39, // 15: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus.error:type_name -> google.rpc.Status
	9,  // 16: kubeflow.pipelines.backend.api.v2beta1.RunDetails.task_details:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	28, // 17: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.pods:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPod
	38, // 18: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.create_time:type_name -> google.protobuf.Timestamp
	38, // 19: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.start_time:type_name -> google.protobuf.Timestamp
	38, // 20: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.end_time:type_name -> google.protobuf.Timestamp
	3,  // 21: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.status:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskState
	29, // 22: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.status_metadata:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata
	7,  // 23: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.state_history:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus
	4,  // 24: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.type:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskType
	30, // 25: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.type_attributes:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TypeAttributes
	39, // 26: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.error:type_name -> google.rpc.Status
	31, // 27: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.child_tasks:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.ChildTask
	32, // 28: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.inputs:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs
	32, // 29: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.outputs:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs
	5,  // 30: kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest.run:type_name -> kubeflow.pipelines.backend.api.v2beta1.Run
	5,  // 31: kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse.runs:type_name -> kubeflow.pipelines.backend.api.v2beta1.Run
	9,  // 32: kubeflow.pipelines.backend.api.v2beta1.CreateTaskRequest.task:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	9,  // 33: kubeflow.pipelines.backend.api.v2beta1.UpdateTaskRequest.task:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	9,  // 34: kubeflow.pipelines.backend.api.v2beta1.ListTasksResponse.tasks:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	2,  // 35: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPod.type:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.TaskPodType
	33, // 36: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata.custom_properties:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata.CustomPropertiesEntry
	34, // 37: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.parameters:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOParameter
	35, // 38: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.artifacts:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOArtifact
	40, // 39: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.StatusMetadata.CustomPropertiesEntry.value:type_name -> google.protobuf.Value
	40, // 40: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOParameter.value:type_name -> google.protobuf.Value
	41, // 41: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOParameter.type:type_name -> kubeflow.pipelines.backend.api.v2beta1.IOType
	42, // 42: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOParameter.producer:type_name -> kubeflow.pipelines.backend.api.v2beta1.IOProducer
	43, // 43: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOArtifact.artifacts:type_name -> kubeflow.pipelines.backend.api.v2beta1.Artifact
	41, // 44: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOArtifact.type:type_name -> kubeflow.pipelines.backend.api.v2beta1.IOType
	42, // 45: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputOutputs.IOArtifact.producer:type_name -> kubeflow.pipelines.backend.api.v2beta1.IOProducer
	12, // 46: kubeflow.pipelines.backend.api.v2beta1.RunService.CreateRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest
	13, // 47: kubeflow.pipelines.backend.api.v2beta1.RunService.GetRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.GetRunRequest
	14, // 48: kubeflow.pipelines.backend.api.v2beta1.RunService.ListRuns:input_type -> kubeflow.pipelines.backend.api.v2beta1.ListRunsRequest
	17, // 49: kubeflow.pipelines.backend.api.v2beta1.RunService.ArchiveRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.ArchiveRunRequest
	18, // 50: kubeflow.pipelines.backend.api.v2beta1.RunService.UnarchiveRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.UnarchiveRunRequest
	19, // 51: kubeflow.pipelines.backend.api.v2beta1.RunService.DeleteRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.DeleteRunRequest
	20, // 52: kubeflow.pipelines.backend.api.v2beta1.RunService.ReadArtifact:input_type -> kubeflow.pipelines.backend.api.v2beta1.ReadArtifactRequest
	15, // 53: kubeflow.pipelines.backend.api.v2beta1.RunService.TerminateRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.TerminateRunRequest
	22, // 54: kubeflow.pipelines.backend.api.v2beta1.RunService.RetryRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.RetryRunRequest
	23, // 55: kubeflow.pipelines.backend.api.v2beta1.RunService.CreateTask:input_type -> kubeflow.pipelines.backend.api.v2beta1.CreateTaskRequest
	24, // 56: kubeflow.pipelines.backend.api.v2beta1.RunService.UpdateTask:input_type -> kubeflow.pipelines.backend.api.v2beta1.UpdateTaskRequest
	25, // 57: kubeflow.pipelines.backend.api.v2beta1.RunService.GetTask:input_type -> kubeflow.pipelines.backend.api.v2beta1.GetTaskRequest
	26, // 58: kubeflow.pipelines.backend.api.v2beta1.RunService.ListTasks:input_type -> kubeflow.pipelines.backend.api.v2beta1.ListTasksRequest
	5,  // 59: kubeflow.pipelines.backend.api.v2beta1.RunService.CreateRun:output_type -> kubeflow.pipelines.backend.api.v2beta1.Run
	5,  // 60: kubeflow.pipelines.backend.api.v2beta1.RunService.GetRun:output_type -> kubeflow.pipelines.backend.api.v2beta1.Run
	16, // 61: kubeflow.pipelines.backend.api.v2beta1.RunService.ListRuns:output_type -> kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse
	44, // 62: kubeflow.pipelines.backend.api.v2beta1.RunService.ArchiveRun:output_type -> google.protobuf.Empty
	44, // 63: kubeflow.pipelines.backend.api.v2beta1.RunService.UnarchiveRun:output_type -> google.protobuf.Empty
	44, // 64: kubeflow.pipelines.backend.api.v2beta1.RunService.DeleteRun:output_type -> google.protobuf.Empty
	21, // 65: kubeflow.pipelines.backend.api.v2beta1.RunService.ReadArtifact:output_type -> kubeflow.pipelines.backend.api.v2beta1.ReadArtifactResponse
	44, // 66: kubeflow.pipelines.backend.api.v2beta1.RunService.TerminateRun:output_type -> google.protobuf.Empty
	44, // 67: kubeflow.pipelines.backend.api.v2beta1.RunService.RetryRun:output_type -> google.protobuf.Empty
	9,  // 68: kubeflow.pipelines.backend.api.v2beta1.RunService.CreateTask:output_type -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	9,  // 69: kubeflow.pipelines.backend.api.v2beta1.RunService.UpdateTask:output_type -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	9,  // 70: kubeflow.pipelines.backend.api.v2beta1.RunService.GetTask:output_type -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	27, // 71: kubeflow.pipelines.backend.api.v2beta1.RunService.ListTasks:output_type -> kubeflow.pipelines.backend.api.v2beta1.ListTasksResponse
	59, // [59:72] is the sub-list for method output_type
	46, // [46:59] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_backend_api_v2beta1_run_proto_init() }
func file_backend_api_v2beta1_run_proto_init() {
	if File_backend_api_v2beta1_run_proto != nil {
		return
	}
	file_backend_api_v2beta1_runtime_config_proto_init()
	file_backend_api_v2beta1_artifact_proto_init()
	file_backend_api_v2beta1_run_proto_msgTypes[0].OneofWrappers = []any{
		(*Run_PipelineVersionId)(nil),
		(*Run_PipelineSpec)(nil),
		(*Run_PipelineVersionReference)(nil),
	}
	file_backend_api_v2beta1_run_proto_msgTypes[4].OneofWrappers = []any{}
	file_backend_api_v2beta1_run_proto_msgTypes[21].OneofWrappers = []any{
		(*ListTasksRequest_ParentId)(nil),
		(*ListTasksRequest_RunId)(nil),
	}
	file_backend_api_v2beta1_run_proto_msgTypes[25].OneofWrappers = []any{}
	file_backend_api_v2beta1_run_proto_msgTypes[29].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_api_v2beta1_run_proto_rawDesc), len(file_backend_api_v2beta1_run_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_api_v2beta1_run_proto_goTypes,
		DependencyIndexes: file_backend_api_v2beta1_run_proto_depIdxs,
		EnumInfos:         file_backend_api_v2beta1_run_proto_enumTypes,
		MessageInfos:      file_backend_api_v2beta1_run_proto_msgTypes,
	}.Build()
	File_backend_api_v2beta1_run_proto = out.File
	file_backend_api_v2beta1_run_proto_goTypes = nil
	file_backend_api_v2beta1_run_proto_depIdxs = nil
}
