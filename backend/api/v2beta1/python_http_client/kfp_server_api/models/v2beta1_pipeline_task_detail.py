# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kfp_server_api.configuration import Configuration


class V2beta1PipelineTaskDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'task_id': 'str',
        'run_id': 'str',
        'pods': 'list[PipelineTaskDetailTaskPod]',
        'cache_fingerprint': 'str',
        'create_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'status': 'V2beta1RuntimeState',
        'status_metadata': 'dict(str, object)',
        'state_history': 'list[V2beta1RuntimeStatus]',
        'type': 'PipelineTaskDetailTaskType',
        'type_attributes': 'PipelineTaskDetailTypeAttributes',
        'error': 'GooglerpcStatus',
        'parent_task_id': 'str',
        'child_tasks': 'list[PipelineTaskDetailChildTask]',
        'inputs': 'PipelineTaskDetailInputOutputs',
        'outputs': 'PipelineTaskDetailInputOutputs'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'task_id': 'task_id',
        'run_id': 'run_id',
        'pods': 'pods',
        'cache_fingerprint': 'cache_fingerprint',
        'create_time': 'create_time',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'status': 'status',
        'status_metadata': 'status_metadata',
        'state_history': 'state_history',
        'type': 'type',
        'type_attributes': 'type_attributes',
        'error': 'error',
        'parent_task_id': 'parent_task_id',
        'child_tasks': 'child_tasks',
        'inputs': 'inputs',
        'outputs': 'outputs'
    }

    def __init__(self, name=None, display_name=None, task_id=None, run_id=None, pods=None, cache_fingerprint=None, create_time=None, start_time=None, end_time=None, status=None, status_metadata=None, state_history=None, type=None, type_attributes=None, error=None, parent_task_id=None, child_tasks=None, inputs=None, outputs=None, local_vars_configuration=None):  # noqa: E501
        """V2beta1PipelineTaskDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._task_id = None
        self._run_id = None
        self._pods = None
        self._cache_fingerprint = None
        self._create_time = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self._status_metadata = None
        self._state_history = None
        self._type = None
        self._type_attributes = None
        self._error = None
        self._parent_task_id = None
        self._child_tasks = None
        self._inputs = None
        self._outputs = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if task_id is not None:
            self.task_id = task_id
        if run_id is not None:
            self.run_id = run_id
        if pods is not None:
            self.pods = pods
        if cache_fingerprint is not None:
            self.cache_fingerprint = cache_fingerprint
        if create_time is not None:
            self.create_time = create_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = status
        if status_metadata is not None:
            self.status_metadata = status_metadata
        if state_history is not None:
            self.state_history = state_history
        if type is not None:
            self.type = type
        if type_attributes is not None:
            self.type_attributes = type_attributes
        if error is not None:
            self.error = error
        if parent_task_id is not None:
            self.parent_task_id = parent_task_id
        if child_tasks is not None:
            self.child_tasks = child_tasks
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs

    @property
    def name(self):
        """Gets the name of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The name of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2beta1PipelineTaskDetail.


        :param name: The name of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V2beta1PipelineTaskDetail.  # noqa: E501

        User specified name of a task that is defined in [Pipeline.spec][].  # noqa: E501

        :return: The display_name of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V2beta1PipelineTaskDetail.

        User specified name of a task that is defined in [Pipeline.spec][].  # noqa: E501

        :param display_name: The display_name of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def task_id(self):
        """Gets the task_id of this V2beta1PipelineTaskDetail.  # noqa: E501

        System-generated ID of a task.  # noqa: E501

        :return: The task_id of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this V2beta1PipelineTaskDetail.

        System-generated ID of a task.  # noqa: E501

        :param task_id: The task_id of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def run_id(self):
        """Gets the run_id of this V2beta1PipelineTaskDetail.  # noqa: E501

        ID of the parent run.  # noqa: E501

        :return: The run_id of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this V2beta1PipelineTaskDetail.

        ID of the parent run.  # noqa: E501

        :param run_id: The run_id of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def pods(self):
        """Gets the pods of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The pods of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: list[PipelineTaskDetailTaskPod]
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this V2beta1PipelineTaskDetail.


        :param pods: The pods of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type pods: list[PipelineTaskDetailTaskPod]
        """

        self._pods = pods

    @property
    def cache_fingerprint(self):
        """Gets the cache_fingerprint of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The cache_fingerprint of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: str
        """
        return self._cache_fingerprint

    @cache_fingerprint.setter
    def cache_fingerprint(self, cache_fingerprint):
        """Sets the cache_fingerprint of this V2beta1PipelineTaskDetail.


        :param cache_fingerprint: The cache_fingerprint of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type cache_fingerprint: str
        """

        self._cache_fingerprint = cache_fingerprint

    @property
    def create_time(self):
        """Gets the create_time of this V2beta1PipelineTaskDetail.  # noqa: E501

        Creation time of a task.  # noqa: E501

        :return: The create_time of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V2beta1PipelineTaskDetail.

        Creation time of a task.  # noqa: E501

        :param create_time: The create_time of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def start_time(self):
        """Gets the start_time of this V2beta1PipelineTaskDetail.  # noqa: E501

        Starting time of a task.  # noqa: E501

        :return: The start_time of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V2beta1PipelineTaskDetail.

        Starting time of a task.  # noqa: E501

        :param start_time: The start_time of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this V2beta1PipelineTaskDetail.  # noqa: E501

        Completion time of a task.  # noqa: E501

        :return: The end_time of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V2beta1PipelineTaskDetail.

        Completion time of a task.  # noqa: E501

        :param end_time: The end_time of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The status of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: V2beta1RuntimeState
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2beta1PipelineTaskDetail.


        :param status: The status of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type status: V2beta1RuntimeState
        """

        self._status = status

    @property
    def status_metadata(self):
        """Gets the status_metadata of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The status_metadata of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._status_metadata

    @status_metadata.setter
    def status_metadata(self, status_metadata):
        """Sets the status_metadata of this V2beta1PipelineTaskDetail.


        :param status_metadata: The status_metadata of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type status_metadata: dict(str, object)
        """

        self._status_metadata = status_metadata

    @property
    def state_history(self):
        """Gets the state_history of this V2beta1PipelineTaskDetail.  # noqa: E501

        A sequence of task statuses. This field keeps a record of state transitions.  # noqa: E501

        :return: The state_history of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: list[V2beta1RuntimeStatus]
        """
        return self._state_history

    @state_history.setter
    def state_history(self, state_history):
        """Sets the state_history of this V2beta1PipelineTaskDetail.

        A sequence of task statuses. This field keeps a record of state transitions.  # noqa: E501

        :param state_history: The state_history of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type state_history: list[V2beta1RuntimeStatus]
        """

        self._state_history = state_history

    @property
    def type(self):
        """Gets the type of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The type of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: PipelineTaskDetailTaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2beta1PipelineTaskDetail.


        :param type: The type of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type type: PipelineTaskDetailTaskType
        """

        self._type = type

    @property
    def type_attributes(self):
        """Gets the type_attributes of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The type_attributes of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: PipelineTaskDetailTypeAttributes
        """
        return self._type_attributes

    @type_attributes.setter
    def type_attributes(self, type_attributes):
        """Sets the type_attributes of this V2beta1PipelineTaskDetail.


        :param type_attributes: The type_attributes of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type type_attributes: PipelineTaskDetailTypeAttributes
        """

        self._type_attributes = type_attributes

    @property
    def error(self):
        """Gets the error of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The error of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: GooglerpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this V2beta1PipelineTaskDetail.


        :param error: The error of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type error: GooglerpcStatus
        """

        self._error = error

    @property
    def parent_task_id(self):
        """Gets the parent_task_id of this V2beta1PipelineTaskDetail.  # noqa: E501

        ID of the parent task if the task is within a component scope. Empty if the task is at the root level.  # noqa: E501

        :return: The parent_task_id of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: str
        """
        return self._parent_task_id

    @parent_task_id.setter
    def parent_task_id(self, parent_task_id):
        """Sets the parent_task_id of this V2beta1PipelineTaskDetail.

        ID of the parent task if the task is within a component scope. Empty if the task is at the root level.  # noqa: E501

        :param parent_task_id: The parent_task_id of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type parent_task_id: str
        """

        self._parent_task_id = parent_task_id

    @property
    def child_tasks(self):
        """Gets the child_tasks of this V2beta1PipelineTaskDetail.  # noqa: E501

        Sequence of dependent tasks.  # noqa: E501

        :return: The child_tasks of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: list[PipelineTaskDetailChildTask]
        """
        return self._child_tasks

    @child_tasks.setter
    def child_tasks(self, child_tasks):
        """Sets the child_tasks of this V2beta1PipelineTaskDetail.

        Sequence of dependent tasks.  # noqa: E501

        :param child_tasks: The child_tasks of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type child_tasks: list[PipelineTaskDetailChildTask]
        """

        self._child_tasks = child_tasks

    @property
    def inputs(self):
        """Gets the inputs of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The inputs of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: PipelineTaskDetailInputOutputs
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this V2beta1PipelineTaskDetail.


        :param inputs: The inputs of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type inputs: PipelineTaskDetailInputOutputs
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this V2beta1PipelineTaskDetail.  # noqa: E501


        :return: The outputs of this V2beta1PipelineTaskDetail.  # noqa: E501
        :rtype: PipelineTaskDetailInputOutputs
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this V2beta1PipelineTaskDetail.


        :param outputs: The outputs of this V2beta1PipelineTaskDetail.  # noqa: E501
        :type outputs: PipelineTaskDetailInputOutputs
        """

        self._outputs = outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2beta1PipelineTaskDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2beta1PipelineTaskDetail):
            return True

        return self.to_dict() != other.to_dict()
