# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kfp_server_api.configuration import Configuration


class V2beta1ArtifactTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'artifact_id': 'str',
        'task_id': 'str',
        'type': 'V2beta1ArtifactTaskType',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'artifact_id': 'artifact_id',
        'task_id': 'task_id',
        'type': 'type',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, artifact_id=None, task_id=None, type=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """V2beta1ArtifactTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._artifact_id = None
        self._task_id = None
        self._type = None
        self._created_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if artifact_id is not None:
            self.artifact_id = artifact_id
        if task_id is not None:
            self.task_id = task_id
        if type is not None:
            self.type = type
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this V2beta1ArtifactTask.  # noqa: E501


        :return: The id of this V2beta1ArtifactTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2beta1ArtifactTask.


        :param id: The id of this V2beta1ArtifactTask.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def artifact_id(self):
        """Gets the artifact_id of this V2beta1ArtifactTask.  # noqa: E501


        :return: The artifact_id of this V2beta1ArtifactTask.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this V2beta1ArtifactTask.


        :param artifact_id: The artifact_id of this V2beta1ArtifactTask.  # noqa: E501
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def task_id(self):
        """Gets the task_id of this V2beta1ArtifactTask.  # noqa: E501


        :return: The task_id of this V2beta1ArtifactTask.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this V2beta1ArtifactTask.


        :param task_id: The task_id of this V2beta1ArtifactTask.  # noqa: E501
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def type(self):
        """Gets the type of this V2beta1ArtifactTask.  # noqa: E501


        :return: The type of this V2beta1ArtifactTask.  # noqa: E501
        :rtype: V2beta1ArtifactTaskType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2beta1ArtifactTask.


        :param type: The type of this V2beta1ArtifactTask.  # noqa: E501
        :type type: V2beta1ArtifactTaskType
        """

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this V2beta1ArtifactTask.  # noqa: E501


        :return: The created_at of this V2beta1ArtifactTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2beta1ArtifactTask.


        :param created_at: The created_at of this V2beta1ArtifactTask.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2beta1ArtifactTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2beta1ArtifactTask):
            return True

        return self.to_dict() != other.to_dict()
