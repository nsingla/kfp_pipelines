# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kfp_server_api.configuration import Configuration


class V2beta1Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'ArtifactArtifactType',
        'uri': 'str',
        'metadata': 'dict(str, object)',
        'number_value': 'float',
        'created_at': 'datetime',
        'namespace': 'str'
    }

    attribute_map = {
        'artifact_id': 'artifact_id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'uri': 'uri',
        'metadata': 'metadata',
        'number_value': 'number_value',
        'created_at': 'created_at',
        'namespace': 'namespace'
    }

    def __init__(self, artifact_id=None, name=None, description=None, type=None, uri=None, metadata=None, number_value=None, created_at=None, namespace=None, local_vars_configuration=None):  # noqa: E501
        """V2beta1Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_id = None
        self._name = None
        self._description = None
        self._type = None
        self._uri = None
        self._metadata = None
        self._number_value = None
        self._created_at = None
        self._namespace = None
        self.discriminator = None

        if artifact_id is not None:
            self.artifact_id = artifact_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri
        if metadata is not None:
            self.metadata = metadata
        if number_value is not None:
            self.number_value = number_value
        if created_at is not None:
            self.created_at = created_at
        if namespace is not None:
            self.namespace = namespace

    @property
    def artifact_id(self):
        """Gets the artifact_id of this V2beta1Artifact.  # noqa: E501


        :return: The artifact_id of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this V2beta1Artifact.


        :param artifact_id: The artifact_id of this V2beta1Artifact.  # noqa: E501
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def name(self):
        """Gets the name of this V2beta1Artifact.  # noqa: E501

        Required. The client provided name of the artifact. Note: it seems in MLMD when name was set, it had to be unique for that type_id this restriction is removed here If this is a \"Metric\" artifact, the name of the metric is treated as the Key in its K/V pair.  # noqa: E501

        :return: The name of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2beta1Artifact.

        Required. The client provided name of the artifact. Note: it seems in MLMD when name was set, it had to be unique for that type_id this restriction is removed here If this is a \"Metric\" artifact, the name of the metric is treated as the Key in its K/V pair.  # noqa: E501

        :param name: The name of this V2beta1Artifact.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this V2beta1Artifact.  # noqa: E501


        :return: The description of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2beta1Artifact.


        :param description: The description of this V2beta1Artifact.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this V2beta1Artifact.  # noqa: E501


        :return: The type of this V2beta1Artifact.  # noqa: E501
        :rtype: ArtifactArtifactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2beta1Artifact.


        :param type: The type of this V2beta1Artifact.  # noqa: E501
        :type type: ArtifactArtifactType
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this V2beta1Artifact.  # noqa: E501

        The uniform resource identifier of the physical artifact. May be empty if there is no physical artifact.  # noqa: E501

        :return: The uri of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this V2beta1Artifact.

        The uniform resource identifier of the physical artifact. May be empty if there is no physical artifact.  # noqa: E501

        :param uri: The uri of this V2beta1Artifact.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    @property
    def metadata(self):
        """Gets the metadata of this V2beta1Artifact.  # noqa: E501

        Optional. User provided custom properties which are not defined by its type.  # noqa: E501

        :return: The metadata of this V2beta1Artifact.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V2beta1Artifact.

        Optional. User provided custom properties which are not defined by its type.  # noqa: E501

        :param metadata: The metadata of this V2beta1Artifact.  # noqa: E501
        :type metadata: dict(str, object)
        """

        self._metadata = metadata

    @property
    def number_value(self):
        """Gets the number_value of this V2beta1Artifact.  # noqa: E501


        :return: The number_value of this V2beta1Artifact.  # noqa: E501
        :rtype: float
        """
        return self._number_value

    @number_value.setter
    def number_value(self, number_value):
        """Sets the number_value of this V2beta1Artifact.


        :param number_value: The number_value of this V2beta1Artifact.  # noqa: E501
        :type number_value: float
        """

        self._number_value = number_value

    @property
    def created_at(self):
        """Gets the created_at of this V2beta1Artifact.  # noqa: E501

        Output only. Create time of the artifact in millisecond since epoch. Note: The type and name is updated from mlmd artifact to be consistent with other backend apis.  # noqa: E501

        :return: The created_at of this V2beta1Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2beta1Artifact.

        Output only. Create time of the artifact in millisecond since epoch. Note: The type and name is updated from mlmd artifact to be consistent with other backend apis.  # noqa: E501

        :param created_at: The created_at of this V2beta1Artifact.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def namespace(self):
        """Gets the namespace of this V2beta1Artifact.  # noqa: E501


        :return: The namespace of this V2beta1Artifact.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V2beta1Artifact.


        :param namespace: The namespace of this V2beta1Artifact.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2beta1Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2beta1Artifact):
            return True

        return self.to_dict() != other.to_dict()
