# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kfp_server_api.configuration import Configuration


class V2beta1Metric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'str',
        'name': 'str',
        'schema': 'V2beta1MetricSchema',
        'value': 'object',
        'created_at': 'datetime',
        'type': 'V2beta1MetricType'
    }

    attribute_map = {
        'task_id': 'task_id',
        'name': 'name',
        'schema': 'schema',
        'value': 'value',
        'created_at': 'created_at',
        'type': 'type'
    }

    def __init__(self, task_id=None, name=None, schema=None, value=None, created_at=None, type=None, local_vars_configuration=None):  # noqa: E501
        """V2beta1Metric - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._name = None
        self._schema = None
        self._value = None
        self._created_at = None
        self._type = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if name is not None:
            self.name = name
        if schema is not None:
            self.schema = schema
        if value is not None:
            self.value = value
        if created_at is not None:
            self.created_at = created_at
        if type is not None:
            self.type = type

    @property
    def task_id(self):
        """Gets the task_id of this V2beta1Metric.  # noqa: E501


        :return: The task_id of this V2beta1Metric.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this V2beta1Metric.


        :param task_id: The task_id of this V2beta1Metric.  # noqa: E501
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def name(self):
        """Gets the name of this V2beta1Metric.  # noqa: E501


        :return: The name of this V2beta1Metric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2beta1Metric.


        :param name: The name of this V2beta1Metric.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def schema(self):
        """Gets the schema of this V2beta1Metric.  # noqa: E501


        :return: The schema of this V2beta1Metric.  # noqa: E501
        :rtype: V2beta1MetricSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this V2beta1Metric.


        :param schema: The schema of this V2beta1Metric.  # noqa: E501
        :type schema: V2beta1MetricSchema
        """

        self._schema = schema

    @property
    def value(self):
        """Gets the value of this V2beta1Metric.  # noqa: E501


        :return: The value of this V2beta1Metric.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this V2beta1Metric.


        :param value: The value of this V2beta1Metric.  # noqa: E501
        :type value: object
        """

        self._value = value

    @property
    def created_at(self):
        """Gets the created_at of this V2beta1Metric.  # noqa: E501


        :return: The created_at of this V2beta1Metric.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2beta1Metric.


        :param created_at: The created_at of this V2beta1Metric.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def type(self):
        """Gets the type of this V2beta1Metric.  # noqa: E501


        :return: The type of this V2beta1Metric.  # noqa: E501
        :rtype: V2beta1MetricType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2beta1Metric.


        :param type: The type of this V2beta1Metric.  # noqa: E501
        :type type: V2beta1MetricType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2beta1Metric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2beta1Metric):
            return True

        return self.to_dict() != other.to_dict()
