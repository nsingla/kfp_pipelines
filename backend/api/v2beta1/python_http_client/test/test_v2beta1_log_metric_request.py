# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kfp_server_api
from kfp_server_api.models.v2beta1_log_metric_request import V2beta1LogMetricRequest  # noqa: E501
from kfp_server_api.rest import ApiException

class TestV2beta1LogMetricRequest(unittest.TestCase):
    """V2beta1LogMetricRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V2beta1LogMetricRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kfp_server_api.models.v2beta1_log_metric_request.V2beta1LogMetricRequest()  # noqa: E501
        if include_optional :
            return V2beta1LogMetricRequest(
                metric = kfp_server_api.models.v2beta1_metric.v2beta1Metric(
                    task_id = '0', 
                    name = '0', 
                    schema = 'Metric', 
                    value = kfp_server_api.models.value_can_be_double_or_a_valid_json,
but_not_string_value,_bool_value,_null_value
api_server_validation_will_be_needed.Value can be double or a valid json,
but not string_value, bool_value, null_value
API server validation will be needed(), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    type = 'METRIC_INPUT', )
            )
        else :
            return V2beta1LogMetricRequest(
        )

    def testV2beta1LogMetricRequest(self):
        """Test V2beta1LogMetricRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
