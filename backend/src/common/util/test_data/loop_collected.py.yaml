# PIPELINE DEFINITION
# Name: primary-pipeline
components:
  comp-analyze-artifact:
    executorLabel: exec-analyze-artifact
    inputDefinitions:
      artifacts:
        analyze_artifact_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        analyze_output_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-analyze-artifact-list:
    executorLabel: exec-analyze-artifact-list
    inputDefinitions:
      artifacts:
        artifact_list_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          isArtifactList: true
  comp-analyze-artifact-list-2:
    executorLabel: exec-analyze-artifact-list-2
    inputDefinitions:
      artifacts:
        artifact_list_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          isArtifactList: true
  comp-create-dataset:
    executorLabel: exec-create-dataset
    outputDefinitions:
      artifacts:
        output_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-for-loop-2:
    dag:
      outputs:
        artifacts:
          pipelinechannel--process-dataset-output_artifact:
            artifactSelectors:
            - outputArtifactKey: output_artifact
              producerSubtask: process-dataset
      tasks:
        analyze-artifact:
          cachingOptions: {}
          componentRef:
            name: comp-analyze-artifact
          dependentTasks:
          - process-dataset
          inputs:
            artifacts:
              analyze_artifact_input:
                # This will search in taskMap for `process-dataset-dag-id-idx`
                # And search for the output with key `output_artifact`
                taskOutputArtifact:
                  outputArtifactKey: output_artifact
                  producerTask: process-dataset
          taskInfo:
            name: analyze-artifact
        process-dataset:
          cachingOptions: {}
          componentRef:
            name: comp-process-dataset
          inputs:
            artifacts:
              input_dataset:
                componentInputArtifact: pipelinechannel--create-dataset-output_dataset
            parameters:
              model_id_in:
                componentInputParameter: pipelinechannel--loop-item-param-1
          taskInfo:
            name: process-dataset
    inputDefinitions:
      artifacts:
        pipelinechannel--create-dataset-output_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--loop-item-param-1:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        pipelinechannel--process-dataset-output_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          isArtifactList: true
  comp-process-dataset:
    executorLabel: exec-process-dataset
    inputDefinitions:
      artifacts:
        input_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        model_id_in:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        output_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-secondary-pipeline:
    dag:
      outputs:
        artifacts:
          Output:
            artifactSelectors:
            - outputArtifactKey: pipelinechannel--process-dataset-output_artifact
              producerSubtask: for-loop-2
      tasks:
        analyze-artifact-list:
          cachingOptions: {}
          componentRef:
            name: comp-analyze-artifact-list
          dependentTasks:
          - for-loop-2
          inputs:
            artifacts:
              artifact_list_input:
                taskOutputArtifact:
                  # This will search for for-loop-2-dag-id in tasks Map
                  # and then search for the outputs.ArtifactIO
                  # that maps to the key below
                  # In this case the output should be list of type Iterator_OUTPUT
                  # This means when each for-loop-2's process-task finished
                  # it should have created artifactTask links to the output
                  # for for-loop-2, with the key being outputArtifactKey
                  outputArtifactKey: pipelinechannel--process-dataset-output_artifact
                  producerTask: for-loop-2
          taskInfo:
            name: analyze-artifact-list
        create-dataset:
          cachingOptions: {}
          componentRef:
            name: comp-create-dataset
          taskInfo:
            name: create-dataset
        for-loop-2:
          componentRef:
            name: comp-for-loop-2
          dependentTasks:
          - create-dataset
          inputs:
            artifacts:
              pipelinechannel--create-dataset-output_dataset:
                taskOutputArtifact:
                  outputArtifactKey: output_dataset
                  producerTask: create-dataset
          parameterIterator:
            itemInput: pipelinechannel--loop-item-param-1
            items:
              raw: '["1", "2", "3"]'
          taskInfo:
            name: for-loop-2
    outputDefinitions:
      artifacts:
        Output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          isArtifactList: true
deploymentSpec:
  executors:
    exec-analyze-artifact:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - analyze_artifact
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef analyze_artifact(analyze_artifact_input: Input[Artifact], analyze_output_artifact:\
          \ Output[Artifact]):\n    with open(analyze_artifact_input.path, \"r\")\
          \ as f:\n        data = f.read()\n    with open(analyze_output_artifact.path,\
          \ \"w\") as f:\n        f.write(f'{{\"values\": {data}}}')\n\n"
        image: python:3.9
    exec-analyze-artifact-list:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - analyze_artifact_list
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef analyze_artifact_list(artifact_list_input: List[Artifact]):\n\
          \    expected_values = ['cat-1', 'cat-2', 'cat-3']\n    expected_metadata\
          \ = ['1', '2', '3']\n    actual_values = []\n    actual_metadata = []\n\
          \    for artifact in artifact_list_input:\n        with open(artifact.path,\
          \ \"r\") as f:\n            data = f.read()\n            actual_values.append(data)\n\
          \            actual_metadata.append(artifact.metadata[\"model_id\"])\n \
          \   assert actual_values == expected_values\n    assert actual_metadata\
          \ == expected_metadata\n\n"
        image: python:3.9
    exec-analyze-artifact-list-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - analyze_artifact_list
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef analyze_artifact_list(artifact_list_input: List[Artifact]):\n\
          \    expected_values = ['cat-1', 'cat-2', 'cat-3']\n    expected_metadata\
          \ = ['1', '2', '3']\n    actual_values = []\n    actual_metadata = []\n\
          \    for artifact in artifact_list_input:\n        with open(artifact.path,\
          \ \"r\") as f:\n            data = f.read()\n            actual_values.append(data)\n\
          \            actual_metadata.append(artifact.metadata[\"model_id\"])\n \
          \   assert actual_values == expected_values\n    assert actual_metadata\
          \ == expected_metadata\n\n"
        image: python:3.9
    exec-create-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - create_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef create_dataset(output_dataset: Output[Dataset]):\n    with open(output_dataset.path,\
          \ \"w\") as f:\n        f.write('cat')\n    output_dataset.metadata[\"item_count\"\
          ] = 5\n    output_dataset.metadata[\"description\"] = \"A simple dataset\
          \ with integers\"\n\n"
        image: python:3.9
    exec-process-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - process_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef process_dataset(\n        model_id_in: str,\n        input_dataset:\
          \ Input[Dataset],\n        output_artifact: Output[Artifact],\n):\n    with\
          \ open(input_dataset.path, \"r\") as f:\n        data = f.read()\n    with\
          \ open(output_artifact.path, \"w\") as f:\n        data_out = f\"{data}-{model_id_in}\"\
          \n        f.write(data_out)\n        print(data_out)\n    output_artifact.metadata[\"\
          model_id\"] = model_id_in\n\n"
        image: python:3.9
pipelineInfo:
  name: primary-pipeline
root:
  dag:
    tasks:
      analyze-artifact-list:
        cachingOptions: {}
        componentRef:
          name: comp-analyze-artifact-list-2
        dependentTasks:
        - secondary-pipeline
        inputs:
          artifacts:
            artifact_list_input:
              # For this case since it's not a pipeline channel, we search
              # for the producer task, and in its outputs section we search
              # for the parameter_key/artifact_key
              taskOutputArtifact:
                outputArtifactKey: Output
                producerTask: secondary-pipeline
        taskInfo:
          name: analyze-artifact-list
      secondary-pipeline:
        cachingOptions: {}
        componentRef:
          name: comp-secondary-pipeline
        taskInfo:
          name: secondary-pipeline
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.2
